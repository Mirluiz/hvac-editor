{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/2d/controllers/canvas.controller.ts","app/2d/controllers/object.controller.ts","app/2d/controllers/pipe.controller.ts","app/2d/index.ts","app/2d/models/architecture/wall.model.ts","app/2d/models/canvas.model.ts","app/2d/models/geometry/arc.model.ts","app/2d/models/geometry/line.model.ts","app/2d/models/ghost/heating/pipe.model.ts","app/2d/models/ghost/heating/radiator.model.ts","app/2d/models/ghost/heating/valve.model.ts","app/2d/models/heating/fitting.model.ts","app/2d/models/heating/pipe.model.ts","app/2d/models/heating/radiator.model.ts","app/2d/models/heating/valve.model.ts","app/2d/models/main.model.ts","app/2d/overlap.model.ts","app/2d/views/canvas.view.ts","app/2d/views/fitting.view.ts","app/2d/views/pipe.view.ts","app/2d/views/radiator.view.ts","app/2d/views/stats.view.ts","app/2d/views/valve.view.ts","app/_test_/common.ts","app/app.ts","app/geometry/vect.ts","app/main.ts","app/ui/controller/info-panel.controller.ts","app/ui/controller/toolbar.controller.ts","app/ui/view/info-panel.view.ts","app/ui/view/toolbar.view.ts","app/utils.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import CanvasView from \"../views/canvas.view\";\nimport CanvasModel from \"../models/canvas.model\";\nimport StatsView from \"../views/stats.view\";\nimport { IVec, Vector } from \"../../geometry/vect\";\nimport PipeController from \"./pipe.controller\";\nimport Overlap from \"../overlap.model\";\nimport ObjectController from \"./object.controller\";\n\nclass Canvas {\n  view: CanvasView;\n  stats: StatsView;\n  model: CanvasModel;\n  pipe: PipeController;\n  object: ObjectController;\n\n  constructor() {\n    this.model = new CanvasModel();\n    this.view = new CanvasView(this.model);\n    this.stats = new StatsView(this.model);\n\n    this.pipe = new PipeController(this.model);\n    this.object = new ObjectController(this.model);\n\n    if (this.view.container) {\n      this.view.container.addEventListener(\n        \"mousemove\",\n        this.mouseMove.bind(this)\n      );\n      this.view.container.addEventListener(\n        \"mousedown\",\n        this.mouseDown.bind(this)\n      );\n      this.view.container.addEventListener(\"mouseup\", this.mouseUp.bind(this));\n      this.view.container.addEventListener(\"wheel\", this.mouseWheel.bind(this));\n      document.addEventListener(\"keyup\", this.keyUp.bind(this));\n    }\n  }\n\n  mouseWheel(e: WheelEvent) {\n    // this.stats.render();\n    // this.view.draw();\n  }\n\n  mouseDown(e: MouseEvent): void {\n    if (e.button === 1) {\n      this.model.wheelClicked = true;\n      return;\n    } else {\n      this.model.wheelClicked = false;\n      this.model.clicked = true;\n    }\n\n    if (!this.model.mouse) return;\n\n    switch (this.model.mode) {\n      case \"default\":\n        break;\n      case \"wall\":\n        break;\n      case \"pipe\":\n        this.pipe.mouseDown();\n        break;\n      case \"radiator\":\n      case \"valve\":\n        this.object.mouseDown();\n        break;\n    }\n\n    // this.stats.render();\n    // this.view.draw();\n  }\n\n  mouseMove(e: MouseEvent): void {\n    if (!this.model.mouse) {\n      this.model.mouse = {\n        x: e.offsetX,\n        y: e.offsetY,\n      };\n    } else {\n      this.model.mouse.x = e.offsetX;\n      this.model.mouse.y = e.offsetY;\n    }\n\n    if (\n      this.model.wheelClicked ||\n      (this.model.mode === \"default\" && this.model.clicked)\n    ) {\n      if (this.model.offset) {\n        this.model.offset.x += e.movementX;\n        this.model.offset.y += e.movementY;\n      } else {\n        this.model.offset = {\n          x: 0,\n          y: 0,\n        };\n      }\n    }\n\n    this.model.overlap.update();\n\n    switch (this.model.mode) {\n      case \"default\":\n        break;\n      case \"wall\":\n        break;\n      case \"pipe\":\n        this.pipe.mouseMove();\n        break;\n      case \"radiator\":\n      case \"valve\":\n        this.object.mouseMove();\n        break;\n    }\n\n    // this.stats.render();\n    // this.view.draw();\n  }\n\n  mouseUp(e: Event) {\n    this.model.clicked = false;\n    this.model.wheelClicked = false;\n\n    if (!this.model.mouse) return;\n\n    switch (this.model.mode) {\n      case \"default\":\n        break;\n      case \"wall\":\n        break;\n      case \"pipe\":\n        this.pipe.mouseUp();\n        break;\n      case \"valve\":\n        this.object.mouseUp();\n        break;\n    }\n  }\n\n  keyUp(e: KeyboardEvent) {\n    if (e.key === \"Escape\") {\n      this.model.actionMode = null; // Todo: future reset place here;\n      this.reset();\n    }\n  }\n\n  reset() {\n    this.model.actionObject = null;\n\n    document.body.style.cursor = \"default\";\n    // this.stats.render();\n    // this.view.draw();\n  }\n}\n\nexport default Canvas;\n","import CanvasModel from \"../models/canvas.model\";\nimport { ICoord, IVec, Vector } from \"../../geometry/vect\";\nimport ValveGhostModel from \"../models/ghost/heating/valve.model\";\nimport ValveModel from \"../models/heating/valve.model\";\nimport RadiatorGhostModel from \"../models/ghost/heating/radiator.model\";\nimport RadiatorModel from \"../models/heating/radiator.model\";\nimport { IOverlap } from \"../overlap.model\";\n\nclass Pipe {\n  model: CanvasModel;\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n  }\n\n  mouseMove() {\n    if (!this.model.overlap.boundMouse) return;\n\n    let bV = new Vector(\n      this.model.overlap.boundMouse.x,\n      this.model.overlap.boundMouse.y\n    );\n\n    if (\n      this.model.placingObject &&\n      this.model.placingObject instanceof ValveGhostModel\n    ) {\n      if (!this.model.overlap.isEmpty) {\n        document.body.style.cursor = \"default\";\n        let pipeFound = [\n          ...this.model.overlap.list,\n          ...this.model.overlap.boundList,\n        ].find((o) => o.body);\n\n        if (pipeFound?.body) {\n        } else {\n          document.body.style.cursor = \"not-allowed\";\n        }\n      } else {\n        document.body.style.cursor = \"not-allowed\";\n      }\n\n      this.model.placingObject.center.x = bV.x;\n      this.model.placingObject.center.y = bV.y;\n    }\n\n    if (\n      this.model.placingObject &&\n      this.model.placingObject instanceof RadiatorGhostModel\n    ) {\n      this.model.placingObject.center.x = bV.x;\n      this.model.placingObject.center.y = bV.y;\n    }\n  }\n\n  mouseDown() {\n    if (this.model.placingObject instanceof ValveGhostModel) {\n      if (!this.model.placingObject.validation()) {\n        console.log(\"Validation error\");\n        return;\n      }\n\n      let valve = new ValveModel(\n        this.model,\n        this.model.placingObject.center.clone()\n      );\n\n      valve.merge();\n    }\n\n    if (this.model.placingObject instanceof RadiatorGhostModel) {\n      if (!this.model.placingObject.validation()) {\n        console.log(\"Validation error\");\n        return;\n      }\n\n      let radiator = new RadiatorModel(\n        this.model,\n        this.model.placingObject.center.clone()\n      );\n\n      radiator.merge();\n\n      this.model.addRadiator(radiator);\n    }\n  }\n\n  mouseUp() {}\n}\n\nexport default Pipe;\n","import CanvasModel from \"../models/canvas.model\";\nimport { IVec, Vector } from \"../../geometry/vect\";\nimport PipeGhostModel from \"../models/ghost/heating/pipe.model\";\nimport PipeModel, { PipeTarget } from \"../models/heating/pipe.model\";\nimport Fitting from \"../models/heating/fitting.model\";\n\nclass Pipe {\n  model: CanvasModel;\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n  }\n\n  mouseMove() {\n    if (!this.model.overlap.boundMouse) return;\n\n    let bV = new Vector(\n      this.model.overlap.boundMouse.x,\n      this.model.overlap.boundMouse.y\n    );\n\n    if (\n      this.model.actionObject &&\n      this.model.actionObject instanceof PipeGhostModel\n    ) {\n      let target: null | PipeTarget = null;\n\n      for (let overlap of [\n        ...this.model.overlap.list,\n        ...this.model.overlap.boundList,\n      ]) {\n        if (overlap.io) {\n          target = {\n            id: overlap.id,\n            io: overlap.io,\n            object: overlap.io.getRadiator(),\n          };\n        } else if (overlap.fitting) {\n          target = {\n            id: overlap.id,\n            object: overlap.fitting,\n          };\n        } else if (overlap.end) {\n          target = {\n            id: overlap.id,\n            end: overlap.end,\n          };\n        } else if (overlap.body?.object) {\n          target = {\n            id: overlap.id,\n            body: overlap.body,\n          };\n        }\n      }\n\n      if (target?.io) {\n        this.model.actionObject.to.vec.x = target.io.getVecAbs().x;\n        this.model.actionObject.to.vec.y = target.io.getVecAbs().y;\n      } else if (target?.object instanceof Fitting) {\n        this.model.actionObject.to.vec.x = target.object.center.x;\n        this.model.actionObject.to.vec.y = target.object.center.y;\n      } else if (target?.body?.object instanceof PipeModel) {\n        this.model.actionObject.to.vec.x = target.body.vec.x;\n        this.model.actionObject.to.vec.y = target.body.vec.y;\n      } else {\n        this.model.actionObject.to.vec.x = bV.x;\n        this.model.actionObject.to.vec.y = bV.y;\n      }\n\n      if (!this.model.actionObject.validation()) {\n        document.body.style.cursor = \"not-allowed\";\n      } else {\n        document.body.style.cursor = \"default\";\n      }\n    }\n  }\n\n  mouseDown() {\n    let coord = this.model.getWorldCoordinates(\n      this.model.mouse.x,\n      this.model.mouse.y\n    );\n\n    coord = coord.bindNet(this.model.config.net.step);\n\n    if (!this.model.actionObject) {\n      this.model.actionMode = \"pipeLaying\";\n    }\n\n    if (this.model.actionObject instanceof PipeGhostModel) {\n      let pipe = new PipeModel(\n        this.model,\n        this.model.actionObject.from.vec.clone(),\n        this.model.actionObject.to.vec.clone()\n      );\n      if (!this.model.actionObject.validation()) return;\n\n      pipe.type = this.model.subMode ?? \"supply\";\n\n      if (!pipe.validation()) throw new Error(\"Cant merge\");\n\n      pipe.update();\n      this.model.addPipe(pipe);\n    }\n\n    this.model.actionObject = new PipeGhostModel(\n      this.model,\n      coord.clone(),\n      coord.clone()\n    );\n  }\n\n  mouseUp() {}\n}\n\nexport default Pipe;\n","import CanvasController from \"./controllers/canvas.controller\";\nimport Toolbar from \"../ui/controller/toolbar.controller\";\nimport StatsView from \"./views/stats.view\";\nimport InfoPanel from \"../ui/controller/info-panel.controller\";\n\nclass Controller {\n  canvas: CanvasController = new CanvasController();\n\n  toolbar: Toolbar;\n  infoPanel: InfoPanel;\n\n  constructor() {\n    this.toolbar = new Toolbar(this.canvas.model);\n    this.infoPanel = new InfoPanel(this.canvas.model);\n    this.canvas.model.update();\n  }\n}\n\nexport default Controller;\n","import { IVec } from \"../../../geometry/vect\";\nimport Line from \"../geometry/line.model\";\n\nclass Wall extends Line {\n  constructor(from: IVec, to: IVec) {\n    super({ vec: from }, { vec: to });\n  }\n\n  get color() {\n    return \"grey\";\n  }\n}\n\nexport default Wall;\n","import { ICoord, IVec, Vector } from \"../../geometry/vect\";\nimport Wall from \"./architecture/wall.model\";\nimport Pipe from \"./heating/pipe.model\";\nimport GhostPipe from \"./ghost/heating/pipe.model\";\nimport Valve from \"./heating/valve.model\";\nimport ValveGhostModel from \"./ghost/heating/valve.model\";\nimport Overlap from \"../overlap.model\";\nimport Fitting from \"./heating/fitting.model\";\nimport { fittingModel } from \"../../_test_/common\";\nimport { ToolbarMode } from \"../../ui/controller/toolbar.controller\";\nimport RadiatorModel from \"./heating/radiator.model\";\nimport RadiatorGhostModel from \"./ghost/heating/radiator.model\";\n\nclass Canvas {\n  private _walls: Array<Wall> = [];\n  private _pipes: Array<Pipe> = [];\n  private _valves: Array<Valve> = [];\n  private _fittings: Array<Fitting> = [];\n  private _radiators: Array<RadiatorModel> = [];\n  overlap: Overlap;\n\n  mode: ToolbarMode = \"default\";\n  subMode: \"supply\" | \"return\" | null = null;\n  actionMode: \"pipeLaying\" | \"wallLaying\" | null = null;\n  actionObject: Wall | Pipe | null | GhostPipe = null;\n  placingObject: Valve | ValveGhostModel | RadiatorGhostModel | null = null;\n\n  constructor() {\n    this.overlap = new Overlap(this);\n\n    fittingModel(this);\n  }\n\n  mouse: { x: number; y: number } = { x: 0, y: 0 };\n  boundMouse: { x: number; y: number } = { x: 0, y: 0 }; // bound for net, or for overlapped objects\n  canvasSize: { x: number; y: number } | null = null;\n  mouseCanvasRatio: { x: number; y: number } | null = null;\n  scale: {\n    amount: number;\n    coord: ICoord | null;\n    limitReached: boolean;\n  } = {\n    amount: 1,\n    coord: null,\n    limitReached: false,\n  };\n  clicked: boolean = false;\n  wheelClicked: boolean = false;\n  keyboard: string | null = null;\n  offset: { x: number; y: number } = { x: 0, y: 0 };\n  config: IConfig = {\n    axis: {\n      show: true,\n    },\n    net: {\n      bind: true,\n      show: true,\n      step: 20,\n    },\n    overlap: {\n      bindDistance: 10,\n    },\n  };\n\n  get walls(): Array<Wall> {\n    return this._walls;\n  }\n\n  set walls(value: Array<Wall>) {\n    this._walls = value;\n  }\n\n  get pipes(): Array<Pipe> {\n    return this._pipes;\n  }\n\n  set pipes(value: Array<Pipe>) {\n    this._pipes = value;\n  }\n\n  get valves(): Array<Valve> {\n    return this._valves;\n  }\n\n  set valves(value: Array<Valve>) {\n    this._valves = value;\n  }\n\n  get fittings(): Array<Fitting> {\n    return this._fittings;\n  }\n\n  set fittings(value: Array<Fitting>) {\n    this._fittings = value;\n  }\n\n  get radiators(): Array<RadiatorModel> {\n    return this._radiators;\n  }\n\n  set radiators(value: Array<RadiatorModel>) {\n    this._radiators = value;\n  }\n\n  addRadiator(radiator: RadiatorModel) {\n    this.radiators.push(radiator);\n    this.radiators = this.radiators;\n\n    return this.radiators[this.radiators.length - 1];\n  }\n\n  addWall(wall: Wall) {\n    this.walls.push(wall);\n    this.walls = this.walls;\n\n    return wall;\n  }\n\n  addPipe(pipe: Pipe) {\n    this.pipes.push(pipe);\n    this.pipes = this.pipes;\n\n    return this.pipes[this.pipes.length - 1];\n  }\n\n  addFitting(fitting: Fitting) {\n    this.fittings.push(fitting);\n    this.fittings = this.fittings;\n\n    return this.fittings[this.fittings.length - 1];\n  }\n\n  addValve(valve: Valve) {\n    this.valves.push(valve);\n    this.valves = this.valves;\n\n    return this.fittings[this.valves.length - 1];\n  }\n\n  getPipeByID(id: string) {\n    return this.pipes.find((p) => p.id === id);\n  }\n\n  update() {\n    this.pipes.map((pipe) => {\n      this.pipes.map((_pipe) => {\n        if (_pipe.id === pipe.id) return;\n\n        if (_pipe.isClose(pipe.from.vec) || _pipe.isClose(pipe.to.vec)) {\n          pipe.merge(_pipe);\n        }\n      });\n\n      this.fittings.map((fitting) => {\n        if (fitting.isClose(pipe.from.vec) && !pipe.from.target) {\n          pipe.connect(fitting);\n        }\n\n        if (fitting.isClose(pipe.to.vec) && !pipe.to.target) {\n          pipe.connect(fitting);\n        }\n      });\n    });\n  }\n\n  //TODO: apply scale transformation here\n  getWorldCoordinates(x: number, y: number): IVec {\n    return new Vector(\n      (x - this.offset.x) * this.scale.amount,\n      (y - this.offset.y) * this.scale.amount\n    );\n  }\n\n  //x: (x + this.model.offset.x) * this.model.scale.amount * this.model.scale.coord.x,\n  //       y: (y + this.model.offset.y)  * this.model.scale.amount,\n  getLocalCoordinates(x: number, y: number) {\n    let _this = this;\n\n    let scale = function (vec: IVec): Vector {\n      return new Vector(vec.x * _this.scale.amount, vec.y * _this.scale.amount);\n    };\n\n    let translate = function (vec: IVec): Vector {\n      return new Vector(vec.x + _this.offset.x, vec.y + _this.offset.y);\n    }.bind(this);\n\n    let t = new Vector(x, y);\n    t = scale(t);\n    // t = rotation(t); TODO order is scaling rotation translation\n    t = translate(t);\n\n    return t;\n  }\n\n  updateMode(mode: ToolbarMode) {\n    this.mode = mode;\n\n    if (!this.mouse) return;\n\n    this.placingObject = null;\n    this.actionObject = null;\n\n    if (mode === \"valve\") {\n      this.placingObject = new ValveGhostModel(\n        this,\n        new Vector(this.mouse.x, this.mouse.y)\n      );\n    }\n\n    if (mode === \"radiator\") {\n      this.placingObject = new RadiatorGhostModel(\n        this,\n        new Vector(this.mouse.x, this.mouse.y)\n      );\n    }\n  }\n\n  updateSubMode(subMode: \"supply\" | \"return\") {\n    this.subMode = subMode;\n  }\n\n  deletePipe(id: string) {\n    this.pipes = this.pipes.filter((p) => p.id !== id);\n  }\n}\n\ninterface IConfig {\n  axis: {\n    show: boolean;\n  };\n  net: {\n    bind: boolean;\n    show: boolean;\n    step: 15 | 20 | 50;\n  };\n  overlap: {\n    bindDistance: 10 | 20;\n  };\n}\n\nexport default Canvas;\n","import { IVec } from \"../../../geometry/vect\";\nimport Main from \"../main.model\";\n\nclass Arc extends Main {\n  radius: number = 5;\n  center: IVec;\n\n  color: string = \"#fff\";\n  width: number = 10;\n\n  constructor(center: IVec) {\n    super();\n\n    this.center = center;\n  }\n}\n\nexport default Arc;\n","import { IVec } from \"../../../geometry/vect\";\nimport Main from \"../main.model\";\n\nclass Line<T extends { vec: IVec } = { vec: IVec }> extends Main {\n  from: T;\n  to: T;\n\n  width: number = 1;\n\n  constructor(from: T, to: T) {\n    super();\n\n    this.from = from;\n    this.to = to;\n  }\n\n  intersectionPoint(line: Line) {}\n}\n\nexport default Line;\n","import Line from \"../../geometry/line.model\";\nimport { IVec } from \"../../../../geometry/vect\";\nimport CanvasModel from \"../../canvas.model\";\nimport { PipeTarget } from \"../../heating/pipe.model\";\nimport Fitting from \"../../heating/fitting.model\";\n\ninterface IGhostPipeEnd {\n  vec: IVec;\n  getPipe: () => Pipe;\n  getOpposite: () => IGhostPipeEnd;\n}\n\nclass Pipe extends Line<IGhostPipeEnd> {\n  model: CanvasModel;\n\n  constructor(model: CanvasModel, from: IVec, to: IVec) {\n    super(\n      {\n        vec: from,\n        getPipe: () => {\n          return this;\n        },\n        getOpposite: () => {\n          return this.to;\n        },\n      },\n      {\n        vec: to,\n        getPipe: () => {\n          return this;\n        },\n        getOpposite: () => {\n          return this.from;\n        },\n      }\n    );\n\n    this.model = model;\n    this.z = 10;\n  }\n\n  get color() {\n    return \"black\";\n  }\n\n  validation(): boolean {\n    let can = true;\n\n    [this.from, this.to].map((end) => {\n      if (!can) return;\n\n      let overlaps = this.model.overlap.direct(end.vec);\n      if (overlaps.length > 0) {\n        let overlap = overlaps[0];\n        let angleBetween;\n        if (overlap && overlap.end) {\n          angleBetween = overlap.end\n            .getOpposite()\n            .vec.sub(end.vec)\n            .angle(end.getOpposite().vec.sub(end.vec));\n\n          if (\n            angleBetween !== undefined &&\n            Math.abs(angleBetween * (180 / Math.PI)) < 90\n          ) {\n            can = false;\n          }\n        } else if (overlap && overlap.body) {\n          can = true;\n        } else {\n          can = false;\n        }\n      }\n    });\n\n    if (!can) {\n      return can;\n    }\n\n    [this.from, this.to].map((end) => {\n      let overlaps = this.model.overlap.direct(end.vec);\n      if (overlaps.length > 0) {\n        let overlap = overlaps[0];\n\n        if (overlap && overlap.end) {\n          if (\n            overlap.end.target &&\n            !(overlap.end.target.object instanceof Fitting)\n          ) {\n            can = false;\n            console.warn(\"Target is not empty\");\n          }\n        }\n\n        if (overlap && overlap.io) {\n          if (overlap.io.isConnected()) {\n            can = false;\n            console.warn(\"Already is connected\");\n          }\n        }\n      }\n    });\n\n    if (!can) {\n      console.warn(\"Cant merge\");\n    }\n\n    return can;\n  }\n}\n\nexport default Pipe;\n","import CanvasModel from \"../../canvas.model\";\nimport { IVec, Vector } from \"../../../../geometry/vect\";\nimport Main from \"../../main.model\";\nimport Pipe from \"../../heating/pipe.model\";\nimport { IO } from \"../../heating/radiator.model\";\n\nclass Radiator extends Main {\n  model: CanvasModel;\n  width: number = 80;\n  height: number = 40;\n\n  /**\n   * center is left top point\n   */\n  center: IVec;\n\n  IOs: [IO<Radiator>, IO<Radiator>];\n\n  constructor(model: CanvasModel, center: IVec) {\n    super();\n\n    this.IOs = [\n      {\n        type: \"return\",\n        getVecAbs: () => {\n          let v = new Vector(-10, 0);\n          return v.sum(this.center);\n        },\n        getRadiator: () => {\n          return this;\n        },\n        vec: new Vector(-10, 0),\n        isConnected: () => false,\n      },\n\n      {\n        type: \"supply\",\n        getVecAbs: () => {\n          let v = new Vector(-10, 40);\n          return v.sum(this.center);\n        },\n        getRadiator: () => {\n          return this;\n        },\n        vec: new Vector(-10, 40),\n        isConnected: () => false,\n      },\n    ];\n\n    this.center = center;\n    this.model = model;\n  }\n\n  validation(): boolean {\n    return true;\n  }\n}\n\nexport default Radiator;\n","import { IVec, Vector } from \"../../../../geometry/vect\";\nimport CanvasModel from \"../../canvas.model\";\nimport Arc from \"../../geometry/arc.model\";\nimport overlapModel from \"../../../overlap.model\";\nimport Pipe from \"../../heating/pipe.model\";\n\nclass Valve extends Arc {\n  private _pipes: Array<Pipe> = [];\n  model: CanvasModel;\n  width: number = 10;\n  length: number = 20;\n\n  constructor(model: CanvasModel, center: IVec) {\n    super(center);\n\n    this.model = model;\n  }\n\n  get pipes(): Array<Pipe> {\n    return this._pipes;\n  }\n\n  set pipes(value: Array<Pipe>) {\n    this._pipes = value;\n  }\n\n  validation(): boolean {\n    let overlaps = this.model.overlap.pipeOverlap(this.center);\n\n    return overlaps.length > 0 && Boolean(overlaps.find((o) => o.body));\n  }\n}\n\nexport default Valve;\n","import { IVec } from \"../../../geometry/vect\";\nimport Line from \"../geometry/line.model\";\nimport Arc from \"../geometry/arc.model\";\nimport Pipe from \"./pipe.model\";\nimport CanvasModel from \"../canvas.model\";\n\nclass Fitting extends Arc {\n  private _pipes: Array<Pipe> = [];\n  model: CanvasModel;\n  width: number = 20;\n  height: number = 20;\n\n  constructor(model: CanvasModel, center: IVec) {\n    super(center);\n\n    this.color = \"black\";\n    this.model = model;\n  }\n\n  get pipes(): Array<Pipe> {\n    return this._pipes;\n  }\n\n  set pipes(value: Array<Pipe>) {\n    this._pipes = value;\n  }\n\n  get type(): \"2d\" | \"3d\" | \"4d\" | null {\n    let ret: \"2d\" | \"3d\" | \"4d\" | null = null;\n\n    if (this.pipes.length === 2) ret = \"2d\";\n    if (this.pipes.length === 3) ret = \"3d\";\n    if (this.pipes.length === 4) ret = \"4d\";\n\n    return ret;\n  }\n\n  isClose(v: IVec) {\n    let distance = this.model.config.overlap.bindDistance;\n\n    return this.center.sub(v).length <= distance;\n  }\n\n  addPipe(pipe: Pipe) {\n    this._pipes.push(pipe);\n    this.pipes = this._pipes;\n\n    return this.pipes[this.pipes.length - 1];\n  }\n}\n\nexport default Fitting;\n","import { IVec, Vector } from \"../../../geometry/vect\";\nimport Line from \"../geometry/line.model\";\nimport CanvasModel from \"../canvas.model\";\nimport Fitting from \"./fitting.model\";\nimport Valve from \"./valve.model\";\nimport Radiator, { IO } from \"./radiator.model\";\nimport { IOverlapBody } from \"../../overlap.model\";\n\nexport type PipeTarget = null | {\n  id: string;\n  object?: Fitting | Valve | Radiator;\n  end?: IPipeEnd;\n  body?: IOverlapBody<Pipe>;\n  io?: IO<Radiator>;\n};\n\nexport interface IPipeEnd {\n  target: PipeTarget;\n  vec: IVec;\n  title: \"from\" | \"to\";\n  getPipe: () => Pipe;\n  getOpposite: () => IPipeEnd;\n}\n\nclass Pipe extends Line<IPipeEnd> {\n  type: \"supply\" | \"return\" = \"supply\";\n  model: CanvasModel;\n  constructor(model: CanvasModel, from: IVec, to: IVec) {\n    super(\n      {\n        target: null,\n        vec: from,\n        title: \"from\",\n        getPipe: () => {\n          return this;\n        },\n        getOpposite: () => {\n          return this.to;\n        },\n      },\n      {\n        target: null,\n        vec: to,\n        title: \"to\",\n        getPipe: () => {\n          return this;\n        },\n        getOpposite: () => {\n          return this.from;\n        },\n      }\n    );\n\n    this.width = 10;\n    this.model = model;\n  }\n\n  get color() {\n    return this.type === \"supply\" ? \"red\" : \"blue\";\n  }\n\n  toOrigin(): IVec {\n    return this.to.vec.sub(this.from.vec);\n  }\n\n  update() {\n    this.model.pipes.map((_pipe) => {\n      if (_pipe.id === this.id) return;\n\n      if (_pipe.isClose(this.from.vec) || _pipe.isClose(this.to.vec)) {\n        this.merge(_pipe);\n      }\n    });\n\n    this.model.fittings.map((fitting) => {\n      if (fitting.isClose(this.from.vec) && !this.from.target) {\n        this.connect(fitting);\n      }\n\n      if (fitting.isClose(this.to.vec) && !this.to.target) {\n        this.connect(fitting);\n      }\n    });\n\n    this.model.radiators.map((radiator) => {\n      let io = radiator.isClose(this.to.vec);\n      if (io) {\n        this.connect(io);\n      }\n    });\n  }\n\n  validation() {\n    let can = true;\n\n    [this.from, this.to].map((end) => {\n      let overlaps = this.model.overlap.pipeOverlap(end.vec);\n      overlaps = overlaps.filter((o) => o.id !== this.id);\n      if (overlaps.length > 0) {\n        let overlap = overlaps[0];\n        let angleBetween;\n        if (overlap && overlap.end) {\n          angleBetween = overlap.end\n            .getOpposite()\n            .vec.sub(end.vec)\n            .angle(end.getOpposite().vec.sub(end.vec));\n          if (\n            angleBetween !== undefined &&\n            Math.abs(angleBetween * (180 / Math.PI)) < 90\n          ) {\n            can = false;\n          }\n        } else if (overlap && overlap.body) {\n          can = true;\n        } else {\n          can = false;\n        }\n      }\n    });\n\n    if (!can) {\n      console.warn(\"Cant merge\");\n    }\n\n    return can;\n  }\n\n  beforeMerge() {\n    console.log(\"before merge\");\n\n    return this.validation();\n  }\n\n  afterMerge() {\n    console.log(\"after merge\");\n  }\n\n  merge(pipe: Pipe): boolean {\n    let merged = false;\n\n    if (!this.beforeMerge()) return false;\n\n    const run = (end: IPipeEnd) => {\n      if (this.id === pipe.id) return;\n\n      let overlaps = this.model.overlap.pipeOverlap(end.vec);\n      overlaps = overlaps.filter((o) => o.id !== end.getPipe().id);\n\n      if (overlaps.length > 0) {\n        let overlap = overlaps[0];\n        if (overlap && overlap.end) {\n          if (overlap.end.target) return;\n\n          let newFitting = new Fitting(this.model, overlap.end.vec);\n          this.model.addFitting(newFitting);\n          newFitting.addPipe(overlap.end.getPipe());\n          newFitting.addPipe(end.getPipe());\n\n          overlap.end.target = { id: newFitting.id, object: newFitting };\n          end.target = { id: newFitting.id, object: newFitting };\n        } else if (overlap && overlap.body) {\n          let mergePoint = overlap.body.vec.bindNet(this.model.config.net.step);\n\n          let newP1 = new Pipe(\n            this.model,\n            overlap.body.object.from.vec.clone(),\n            new Vector(mergePoint.x, mergePoint.y)\n          );\n\n          let newP2 = new Pipe(\n            this.model,\n            new Vector(mergePoint.x, mergePoint.y),\n            overlap.body.object.to.vec.clone()\n          );\n\n          this.model.addPipe(newP1);\n          this.model.addPipe(newP2);\n          overlap.body.object.delete();\n\n          let newFitting = new Fitting(this.model, mergePoint);\n          this.model.addFitting(newFitting);\n\n          newFitting.addPipe(newP1);\n          newFitting.addPipe(newP2);\n\n          newP1.from.target = pipe.from.target;\n          newP1.to.target = { id: newFitting.id, object: newFitting };\n          newP2.from.target = { id: newFitting.id, object: newFitting };\n          newP2.to.target = pipe.to.target;\n\n          merged = true;\n        }\n      }\n    };\n\n    if (!this.from.target) run(this.from);\n    if (!this.to.target) run(this.to);\n\n    this.afterMerge();\n\n    return merged;\n  }\n\n  connect(target: Fitting | Valve | IO<Radiator>) {\n    let merged = false;\n\n    if (target instanceof Fitting) {\n      let isFrom = target.isClose(this.from.vec);\n      let isTo = target.isClose(this.to.vec);\n\n      if (isFrom || isTo) {\n        target.addPipe(this);\n        merged = true;\n      }\n\n      if (isFrom) {\n        this.from.target = { id: target.id, object: target };\n      } else if (isTo) this.to.target = { id: target.id, object: target };\n\n      return merged;\n    }\n\n    if (target && \"getRadiator\" in target) {\n      let isFrom = target.getVecAbs().sub(this.from.vec).length <= 20;\n      let isTo = target.getVecAbs().sub(this.to.vec).length <= 20;\n\n      if (isFrom || isTo) {\n        merged = true;\n      }\n\n      if (isFrom) {\n        this.from.target = {\n          id: target.getRadiator().id,\n          object: target.getRadiator(),\n          io: target,\n        };\n      } else if (isTo)\n        this.to.target = {\n          id: target.getRadiator().id,\n          object: target.getRadiator(),\n          io: target,\n        };\n\n      return merged;\n    }\n\n    return merged;\n  }\n\n  isClose(end: IVec) {\n    let distance = this.model.config.overlap.bindDistance;\n\n    return (\n      this.from.vec.sub(end).length <= distance ||\n      this.to.vec.sub(end).length <= distance ||\n      end.distanceToLine(this) <= distance\n    );\n  }\n\n  delete() {\n    this.model.pipes = this.model.pipes.filter((_p) => _p.id !== this.id);\n  }\n}\n\nexport default Pipe;\n","import { IVec, Vector } from \"../../../geometry/vect\";\nimport Pipe from \"./pipe.model\";\nimport CanvasModel from \"../canvas.model\";\nimport Main from \"../main.model\";\nimport RadiatorModel from \"../ghost/heating/radiator.model\";\n\nexport interface IO<T> {\n  vec: IVec;\n  getVecAbs: () => IVec;\n  type: \"return\" | \"supply\";\n  getRadiator: () => T;\n  isConnected: () => boolean;\n}\n\nclass Radiator extends Main {\n  model: CanvasModel;\n  width: number = 80;\n  height: number = 40;\n  center: IVec; // left top position\n  objectCenter: IVec; // center of object\n  IOs: [IO<Radiator>, IO<Radiator>];\n\n  constructor(model: CanvasModel, center: IVec) {\n    super();\n\n    this.IOs = [\n      {\n        type: \"return\",\n        getVecAbs: () => {\n          let v = new Vector(-10, 0);\n          return v.sum(this.objectCenter).sum(this.center);\n        },\n        getRadiator: () => {\n          return this;\n        },\n        vec: new Vector(-10, 0),\n        isConnected: () => {\n          let ret = this.model.pipes.find((p) => {\n            return (\n              (p.from.target?.object?.id === this.id &&\n                p.from.target?.io?.type === \"return\") ||\n              (p.to.target?.object?.id === this.id &&\n                p.to.target?.io?.type === \"return\")\n            );\n          });\n          return Boolean(ret);\n        },\n      },\n\n      {\n        type: \"supply\",\n        getVecAbs: () => {\n          let v = new Vector(-10, 40);\n          return v.sum(this.objectCenter).sum(this.center);\n        },\n        getRadiator: () => {\n          return this;\n        },\n        vec: new Vector(-10, 40),\n        isConnected: () => {\n          let ret = this.model.pipes.find((p) => {\n            return (\n              (p.from.target?.object?.id === this.id &&\n                p.from.target?.io?.type === \"supply\") ||\n              (p.to.target?.object?.id === this.id &&\n                p.to.target?.io?.type === \"supply\")\n            );\n          });\n          return Boolean(ret);\n        },\n      },\n    ];\n\n    this.center = center;\n    this.model = model;\n    this.objectCenter = new Vector(this.width / 2, this.height / 2).reverse();\n  }\n\n  get pipes(): Array<Pipe> {\n    return [];\n  }\n\n  beforeMerge() {\n    return true;\n  }\n\n  merge(): boolean {\n    let merged = false;\n\n    if (!this.beforeMerge()) return false;\n\n    this.afterMerge();\n\n    return merged;\n  }\n\n  afterMerge() {}\n\n  isClose(v: IVec) {\n    let distance = this.model.config.overlap.bindDistance;\n    let ret: IO<Radiator> | undefined = undefined;\n\n    for (let io of this.IOs) {\n      if (io.getVecAbs().sub(v).length <= distance) {\n        ret = io;\n      }\n    }\n\n    return ret;\n  }\n}\n\nexport default Radiator;\n","import { IVec, Vector } from \"../../../geometry/vect\";\nimport Arc from \"../geometry/arc.model\";\nimport Pipe from \"./pipe.model\";\nimport CanvasModel from \"../canvas.model\";\n\nclass Valve extends Arc {\n  private _pipes: Array<Pipe> = [];\n  model: CanvasModel;\n  width: number = 10;\n  length: number = 20;\n\n  constructor(model: CanvasModel, center: IVec) {\n    super(center);\n\n    this.model = model;\n  }\n\n  get pipes(): Array<Pipe> {\n    return this._pipes;\n  }\n\n  set pipes(value: Array<Pipe>) {\n    this._pipes = value;\n  }\n\n  beforeMerge() {\n    return true;\n  }\n\n  merge(): boolean {\n    let merged = false;\n\n    if (!this.beforeMerge()) return false;\n\n    let overlaps = this.model.overlap.pipeOverlap(this.center);\n    overlaps = overlaps.filter((o) => o.id !== this.id);\n\n    overlaps.map((overlap) => {\n      if (overlap.body) {\n        let mergePoint = overlap.body.vec.bindNet(this.model.config.net.step);\n\n        let newP1 = new Pipe(\n          this.model,\n          overlap.body.object.from.vec.clone(),\n          new Vector(mergePoint.x, mergePoint.y)\n        );\n\n        let newP2 = new Pipe(\n          this.model,\n          new Vector(mergePoint.x, mergePoint.y),\n          overlap.body.object.to.vec.clone()\n        );\n\n        this.model.addPipe(newP1);\n        this.model.addPipe(newP2);\n        overlap.body.object.delete();\n\n        let newValve = new Valve(this.model, mergePoint);\n        this.model.addValve(newValve);\n\n        newValve.addPipe(newP1);\n        newValve.addPipe(newP2);\n\n        newP1.from.target = overlap.body.object.from.target;\n        newP1.to.target = { id: newValve.id, object: newValve };\n        newP2.from.target = { id: newValve.id, object: newValve };\n        newP2.to.target = overlap.body.object.to.target;\n\n        merged = true;\n      }\n    });\n\n    this.afterMerge();\n\n    return merged;\n  }\n\n  afterMerge() {}\n\n  isClose(v: IVec) {\n    let distance = this.model.config.overlap.bindDistance;\n\n    return this.center.sub(v).length <= distance;\n  }\n\n  addPipe(pipe: Pipe) {\n    this._pipes.push(pipe);\n    this.pipes = this._pipes;\n\n    return this.pipes[this.pipes.length - 1];\n  }\n}\n\nexport default Valve;\n","import { uuid } from \"../../utils\";\n\nclass Main {\n  id: string;\n  z: number = 0;\n\n  constructor() {\n    this.id = uuid();\n  }\n}\n\nexport default Main;\n","import Pipe, { IPipeEnd } from \"./models/heating/pipe.model\";\nimport CanvasModel from \"./models/canvas.model\";\nimport { IVec, Vector } from \"../geometry/vect\";\nimport Fitting from \"./models/heating/fitting.model\";\nimport Radiator, { IO } from \"./models/heating/radiator.model\";\n\nclass Overlap {\n  readonly model: CanvasModel;\n  boundMouse: IVec | null = null;\n\n  private walls: Array<IOverlap> = [];\n  private pipes: Array<IOverlap> = [];\n  private valves: Array<IOverlapValve> = [];\n  private objectIOs: Array<IOverlap> = [];\n\n  first: IOverlap | null = null;\n  list: Array<IOverlap> = [];\n  boundList: Array<IOverlap> = [];\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n  }\n\n  get isEmpty() {\n    return this.list.length === 0 && this.boundList.length === 0;\n  }\n\n  update() {\n    let wMouse = this.model.getWorldCoordinates(\n      this.model.mouse.x,\n      this.model.mouse.y\n    );\n\n    let netBoundMouse = new Vector(\n      Math.round(wMouse.x / this.model.config.net.step) *\n        this.model.config.net.step,\n      Math.round(wMouse.y / this.model.config.net.step) *\n        this.model.config.net.step\n    );\n    let v = new Vector(wMouse.x, wMouse.y);\n\n    this.wallsOverlap();\n    this.list = [\n      ...this.pipeOverlap(v),\n      ...this.IOOverlap(v),\n      ...this.fittingOverlap(v),\n    ];\n    this.boundList = [\n      ...this.pipeOverlap(netBoundMouse),\n      ...this.IOOverlap(netBoundMouse),\n      ...this.fittingOverlap(netBoundMouse),\n    ];\n\n    //problem. it updates only one. fix this\n    // if (this.list.length === 0 && this.boundList.length === 0) {\n    this.boundMouse = netBoundMouse.clone();\n    // }\n\n    this.firstOverlap(v);\n  }\n\n  direct(vec: IVec) {\n    let list = [\n      ...this.pipeOverlap(vec),\n      ...this.IOOverlap(vec),\n      ...this.fittingOverlap(vec),\n    ];\n\n    return list;\n  }\n\n  /**\n   * it is sorted by height (more height -> more closer to user)\n   */\n  firstOverlap(vec: IVec) {\n    let overlaps = [...this.list, ...this.boundList];\n\n    if (overlaps.length > 0) {\n      overlaps.sort((a, b) => {\n        let aL = 0;\n        let bL = 0;\n\n        if (a.fitting) {\n          aL = a.fitting.center.sub(vec).length;\n        } else if (a.io) {\n          aL = a.io.getVecAbs().sub(vec).length;\n        } else if (a.body) {\n          aL = a.body.vec.sub(vec).length;\n        }\n\n        if (b.fitting) {\n          bL = b.fitting.center.sub(vec).length;\n        } else if (b.io) {\n          bL = b.io.getVecAbs().sub(vec).length;\n        } else if (b.body) {\n          bL = b.body.vec.sub(vec).length;\n        }\n\n        return aL - bL;\n      });\n    }\n\n    if (overlaps.length > 0) {\n      overlaps.sort((a, b) => {\n        let aZ = 0;\n        let bZ = 0;\n\n        if (a.fitting) {\n          aZ = a.fitting.center.z + a.fitting.width;\n        } else if (a.io) {\n          aZ = a.io.getVecAbs().z;\n        } else if (a.body) {\n          aZ = a.body.vec.z;\n        }\n\n        if (b.fitting) {\n          bZ = b.fitting.center.z + b.fitting.width;\n        } else if (b.io) {\n          bZ = b.io.getVecAbs().z;\n        } else if (b.body) {\n          bZ = b.body.vec.z;\n        }\n\n        return aZ - bZ;\n      });\n    }\n\n    this.first = overlaps.reverse()[0];\n  }\n\n  wallsOverlap() {\n    this.model.walls.map(() => {});\n  }\n\n  //Todo: currently all project use this, split it.\n  pipeOverlap(vec: IVec): Array<IOverlap> {\n    let ret: Array<IOverlap> = [];\n\n    let bind = this.model.config.overlap.bindDistance;\n\n    this.model.pipes.map((pipe) => {\n      let _p: IOverlap | null = null;\n\n      if (pipe.from.vec.sub(vec).length <= bind) {\n        _p = {\n          id: pipe.id,\n          end: pipe.from,\n        };\n      }\n\n      if (!_p && pipe.to.vec.sub(vec).length <= bind) {\n        _p = {\n          id: pipe.id,\n          end: pipe.to,\n        };\n      }\n\n      if (!_p) {\n        let l = vec.distanceToLine(pipe);\n\n        if (l <= bind) {\n          let normPipe = pipe.toOrigin().normalize();\n          let projPipe = pipe.toOrigin().projection(vec.sub(pipe.from.vec));\n\n          _p = {\n            id: pipe.id,\n            body: {\n              object: pipe,\n              vec: normPipe.multiply(projPipe).sum(pipe.from.vec),\n            },\n          };\n        }\n      }\n\n      if (_p) ret.push(_p);\n    });\n\n    return ret;\n  }\n\n  fittingOverlap(vec: IVec): Array<IOverlap> {\n    let ret: Array<IOverlap> = [];\n\n    let bind = this.model.config.overlap.bindDistance;\n\n    this.model.fittings.map((fitting) => {\n      let _f: IOverlap | null = null;\n\n      if (fitting.center.sub(vec).length <= bind) {\n        _f = {\n          id: fitting.id,\n          fitting: fitting,\n        };\n      }\n\n      if (_f) ret.push(_f);\n    });\n\n    if (ret.length > 1) {\n      ret.sort((a, b) => {\n        return 1;\n        // return a.io?.vec.x -\n      });\n    }\n\n    return ret;\n  }\n\n  IOOverlap(vec: IVec): Array<IOverlap> {\n    let ret: Array<IOverlap> = [];\n\n    let bind = this.model.config.overlap.bindDistance;\n\n    this.model.radiators.map((radiator) => {\n      radiator.IOs.map((io) => {\n        let _r: IOverlap | null = null;\n        if (io.getVecAbs().sub(vec).length <= bind) {\n          _r = {\n            id: radiator.id,\n            io: io,\n          };\n        }\n\n        if (_r) ret.push(_r);\n      });\n    });\n\n    if (ret.length > 1) {\n      ret.sort((a, b) => {\n        return 1;\n        // return a.io?.vec.x -\n      });\n    }\n\n    return ret;\n  }\n}\n\nexport interface IOverlap {\n  id: string;\n  body?: IOverlapBody<Pipe>;\n  end?: IPipeEnd;\n  fitting?: Fitting;\n  io?: IO<Radiator>;\n}\n\nexport interface IOverlapBody<T> {\n  object: T;\n  vec: IVec;\n}\n\nexport interface IOverlapValve extends IOverlap {}\n\nexport default Overlap;\n","import { IVec, Vector } from \"../../geometry/vect\";\nimport CanvasModel from \"../models/canvas.model\";\nimport PipeView from \"./pipe.view\";\nimport ValveView from \"./valve.view\";\nimport FittingView from \"./fitting.view\";\nimport RadiatorView from \"./radiator.view\";\nimport Pipe from \"../models/heating/pipe.model\";\nimport PipeGhost from \"../models/ghost/heating/pipe.model\";\nimport Wall from \"../models/architecture/wall.model\";\nimport Radiator from \"../models/heating/radiator.model\";\nimport Valve from \"../models/heating/valve.model\";\nimport ValveGhostModel from \"../models/ghost/heating/valve.model\";\nimport Fitting from \"../models/heating/fitting.model\";\nimport PipeGhostModel from \"../models/ghost/heating/pipe.model\";\nimport RadiatorModel from \"../models/ghost/heating/radiator.model\";\n\nclass Canvas {\n  model: CanvasModel;\n  container: HTMLCanvasElement | null;\n  pipe: PipeView | null = null;\n  valve: ValveView | null = null;\n  fitting: FittingView | null = null;\n  radiator: RadiatorView | null = null;\n  zIndex: any | null = null;\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n    this.container = document.querySelector(\"#editor\");\n\n    this.init();\n  }\n\n  init() {\n    this.initCanvasContainer();\n\n    const ctx = this.container?.getContext(\"2d\");\n\n    if (ctx) {\n      this.pipe = new PipeView(this, this.model, ctx);\n      this.valve = new ValveView(this, this.model, ctx);\n      this.fitting = new FittingView(this, this.model, ctx);\n      this.radiator = new RadiatorView(this, this.model, ctx);\n      this.zIndex = new RadiatorView(this, this.model, ctx);\n    }\n  }\n\n  draw() {\n    this.clear();\n    this.drawNet();\n    this.drawWalls();\n\n    let { pipes, walls, radiators, valves, fittings } = this.model;\n\n    let objects = [\n      ...pipes,\n      ...walls,\n      ...radiators,\n      ...valves,\n      ...fittings,\n    ].sort((a, b) => {\n      return a.z - b.z;\n    });\n\n    objects.map((object) => {\n      if (object instanceof Pipe) {\n        this.pipe?.drawPipe(object);\n      }\n\n      if (object instanceof Wall) {\n        // console.log(\"Wall\");\n        // this.drawWall(o);\n      }\n\n      if (object instanceof Radiator) {\n        // console.log(\"Radiator\");\n        this.radiator?.drawRadiator(object);\n      }\n\n      if (object instanceof Valve) {\n        // console.log(\"Vavle\");\n        this.valve?.drawValve(object);\n      }\n\n      if (object instanceof Fitting) {\n        this.fitting?.drawFitting(object);\n      }\n    });\n\n    if (\n      this.model.actionObject &&\n      this.model.actionObject instanceof PipeGhostModel\n    ) {\n      this.pipe?.drawGhost(this.model.actionObject);\n    }\n\n    if (\n      this.model.placingObject &&\n      this.model.placingObject instanceof ValveGhostModel\n    ) {\n      this.valve?.drawGhost(this.model.placingObject);\n    }\n\n    if (\n      this.model.placingObject &&\n      this.model.placingObject instanceof RadiatorModel\n    ) {\n      this.radiator?.drawGhost(this.model.placingObject);\n    }\n  }\n\n  clear() {\n    const ctx = this.container?.getContext(\"2d\");\n\n    if (!ctx || !this.model.mouse || !this.container) return;\n\n    ctx.clearRect(0, 0, this.container.width, this.container.height);\n    ctx.fillStyle = \"#f5f5f5\";\n    ctx.fillRect(0, 0, this.container.width, this.container.height);\n    //f5f5f5\n  }\n\n  drawMouse() {\n    const ctx = this.container?.getContext(\"2d\");\n\n    if (!ctx || !this.model.mouse) return;\n\n    ctx.save();\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"red\";\n    ctx.lineWidth = 2;\n    ctx.arc(this.model.mouse.x, this.model.mouse.y, 1, 0, 2 * Math.PI);\n\n    ctx.restore();\n  }\n\n  drawNet() {\n    const ctx = this.container?.getContext(\"2d\");\n\n    if (!ctx || !this.model.mouse || !this.container) return;\n    if (!this.model.config.net.show) return;\n\n    ctx.save();\n\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n\n    let step = this.model.config.net.step * this.model.scale.amount;\n    let h = this.container.height;\n    let w = this.container.width;\n    let netOffset: IVec = new Vector(\n      this.model.offset.x % step,\n      this.model.offset.y % step\n    );\n\n    //x\n    let iV = 0;\n    let maxV = w / step;\n    while (iV <= maxV) {\n      let from: IVec = new Vector(step * iV + netOffset.x, 0);\n      let to: IVec = new Vector(step * iV + netOffset.x, h);\n\n      ctx.moveTo(from.x, from.y);\n      ctx.lineTo(to.x, to.y);\n      iV++;\n    }\n\n    //y\n    let iH = 0;\n    let maxH = h / step;\n    while (iH <= maxH) {\n      let from: IVec = new Vector(0, step * iH + netOffset.y);\n      let to: IVec = new Vector(w, step * iH + netOffset.y);\n\n      ctx.moveTo(from.x, from.y);\n      ctx.lineTo(to.x, to.y);\n\n      iH++;\n    }\n\n    ctx.globalAlpha = 0.2;\n\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawNet1() {\n    const ctx = this.container?.getContext(\"2d\");\n\n    if (!ctx || !this.model.mouse || !this.container) return;\n    if (!this.model.config.net.show) return;\n\n    ctx.save();\n\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n\n    // let step = this.model.config.net.step * this.model.scale.amount;\n    let step = this.model.config.net.step;\n    let h = this.container.height;\n    let w = this.container.width;\n\n    //x\n    let iV = 0;\n    let maxV = w / step;\n    while (iV <= maxV) {\n      let from: IVec = this.model.getLocalCoordinates(step * iV, 0);\n      let to: IVec = this.model.getLocalCoordinates(step * iV, h);\n\n      ctx.moveTo(from.x, from.y);\n      ctx.lineTo(to.x, to.y);\n      iV++;\n    }\n\n    //y\n    let iH = 0;\n    let maxH = h / step;\n    while (iH <= maxH) {\n      let from: IVec = this.model.getLocalCoordinates(0, step * iH);\n      let to: IVec = this.model.getLocalCoordinates(w, step * iH);\n\n      ctx.moveTo(from.x, from.y);\n      ctx.lineTo(to.x, to.y);\n\n      iH++;\n    }\n\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawAxis() {\n    const ctx = this.container?.getContext(\"2d\");\n\n    if (!ctx || !this.model.mouse || !this.container) return;\n    if (!this.model.config.axis.show) return;\n\n    ctx.save();\n    ctx.beginPath();\n\n    let h = this.container.height;\n    let w = this.container.width;\n\n    let x_From = this.model.getLocalCoordinates(0, 0);\n    let x_To = this.model.getLocalCoordinates(w, 0);\n    let y_From = this.model.getLocalCoordinates(0, 0);\n    let y_To = this.model.getLocalCoordinates(0, h);\n\n    ctx.moveTo(0, x_From.y);\n    ctx.lineTo(w, x_To.y);\n\n    ctx.moveTo(y_From.x, 0);\n    ctx.lineTo(y_To.x, h);\n    ctx.strokeStyle = \"red\";\n\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawWalls() {\n    let walls = this.model.walls;\n\n    walls?.map((wall) => {\n      if (!this.container) return;\n\n      const ctx = this.container.getContext(\"2d\");\n\n      if (!ctx) return;\n\n      ctx.save();\n      ctx.beginPath();\n\n      let from = this.model.getLocalCoordinates(\n        wall.from.vec.x,\n        wall.from.vec.y\n      );\n      let to = this.model.getLocalCoordinates(wall.from.vec.x, wall.from.vec.y);\n\n      ctx.moveTo(from.x, from.y);\n      ctx.lineTo(to.x, to.y);\n\n      ctx.strokeStyle = wall.color;\n      ctx.lineWidth = wall.width;\n\n      ctx.stroke();\n      ctx.restore();\n    });\n  }\n\n  initCanvasContainer(): void {\n    if (!this.container) return;\n\n    let h =\n      Math.ceil(screen.height / this.model.config.net.step) *\n      this.model.config.net.step;\n    let w =\n      Math.ceil(screen.width / this.model.config.net.step) *\n        this.model.config.net.step -\n      250; // 250 is panel width\n\n    this.container.style.height = h + \"px\";\n    this.container.style.width = w + \"px\";\n    this.container.height = h;\n    this.container.width = w;\n\n    this.model.canvasSize = {\n      y: h,\n      x: w,\n    };\n  }\n}\n\nexport default Canvas;\n","import CanvasModel from \"../models/canvas.model\";\nimport PipeModel from \"../models/heating/pipe.model\";\nimport CanvasView from \"./canvas.view\";\nimport ValveModel from \"../models/heating/valve.model\";\nimport FittingModel from \"../models/heating/fitting.model\";\nimport { IVec, Vector } from \"../../geometry/vect\";\n\nclass Fitting {\n  canvas: CanvasView;\n  ctx: CanvasRenderingContext2D;\n\n  constructor(\n    view: CanvasView,\n    model: CanvasModel,\n    ctx: CanvasRenderingContext2D\n  ) {\n    this.canvas = view;\n    this.ctx = ctx;\n  }\n\n  drawFittings() {\n    this.canvas.model.fittings.map((fitting) => {\n      this.drawFitting(fitting);\n    });\n  }\n\n  drawFitting(fitting: FittingModel) {\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    // switch (fitting.type) {\n    //   case \"2d\":\n    //     {\n    //       let pipe1 = fitting.pipes[0];\n    //       let pipe2 = fitting.pipes[1];\n    //       let pipe1End, pipe1OppositeEnd, pipe2End, pipe2OppositeEnd;\n    //\n    //       pipe1End =\n    //         pipe1.from.target?.id === fitting.id ? pipe1.from : pipe1.to;\n    //       pipe1OppositeEnd = pipe1End.getOpposite();\n    //\n    //       pipe2End =\n    //         pipe2.from.target?.id === fitting.id ? pipe2.from : pipe2.to;\n    //       pipe2OppositeEnd = pipe2End.getOpposite();\n    //\n    //       if (!pipe1End || !pipe2End || !pipe1OppositeEnd || !pipe2OppositeEnd)\n    //         break;\n    //\n    //       let fitting1N = pipe1OppositeEnd.vec.sub(pipe1End.vec).normalize();\n    //       let fitting2N = pipe2OppositeEnd.vec.sub(pipe2End.vec).normalize();\n    //\n    //       // console.log(\n    //       //   \"fitting1N.angle();\",\n    //       //   fitting1N.angle1(fitting2N) * (180 / Math.PI),\n    //       //   fitting2N.angle1(fitting1N) * (180 / Math.PI)\n    //       // );\n    //\n    //       let fittingNeck1Left = fitting1N\n    //         .perpendicular(\"left\")\n    //         .multiply(fitting.width)\n    //         .sum(fitting1N.multiply(fitting.width))\n    //         .sum(fitting.center);\n    //       let fittingNeck1Right = fitting1N\n    //         .perpendicular(\"right\")\n    //         .multiply(fitting.width)\n    //         .sum(fitting1N.multiply(fitting.width))\n    //         .sum(fitting.center);\n    //       let fittingNeck2Left = fitting2N\n    //         .perpendicular(\"left\")\n    //         .multiply(fitting.width)\n    //         .sum(fitting2N.multiply(fitting.width))\n    //         .sum(fitting.center);\n    //       let fittingNeck2Right = fitting2N\n    //         .perpendicular(\"right\")\n    //         .multiply(fitting.width)\n    //         .sum(fitting2N.multiply(fitting.width))\n    //         .sum(fitting.center);\n    //\n    //       let pipe1Angle = pipe1OppositeEnd.vec.sub(pipe1End.vec).angle();\n    //       let pipe2Angle = pipe2End.vec.sub(pipe2OppositeEnd.vec).angle();\n    //       let needBezier = pipe1Angle - pipe2Angle !== 0;\n    //\n    //       let p1 = this.canvas.model.getLocalCoordinates(\n    //         fittingNeck1Right.x,\n    //         fittingNeck1Right.y\n    //       );\n    //       let p2 = this.canvas.model.getLocalCoordinates(\n    //         fittingNeck1Left.x,\n    //         fittingNeck1Left.y\n    //       );\n    //       let p3 = this.canvas.model.getLocalCoordinates(\n    //         fittingNeck2Right.x,\n    //         fittingNeck2Right.y\n    //       );\n    //       let p4 = this.canvas.model.getLocalCoordinates(\n    //         fittingNeck2Left.x,\n    //         fittingNeck2Left.y\n    //       );\n    //\n    //       this.ctx.moveTo(p1.x, p1.y);\n    //\n    //       if (needBezier) {\n    //         let curve = fitting1N\n    //           .perpendicular(\"right\")\n    //           .sum(fitting2N.perpendicular(\"left\"))\n    //           .normalize()\n    //           .multiply(fitting.width)\n    //           .sum(fitting.center);\n    //         let c = this.canvas.model.getLocalCoordinates(curve.x, curve.y);\n    //         this.ctx.bezierCurveTo(c.x, c.y, c.x, c.y, p4.x, p4.y);\n    //       } else {\n    //         this.ctx.lineTo(p4.x, p4.y);\n    //       }\n    //\n    //       this.ctx.lineTo(p3.x, p3.y);\n    //       if (needBezier) {\n    //         let curve = fitting2N\n    //           .perpendicular(\"right\")\n    //           .sum(fitting1N.perpendicular(\"left\"))\n    //           .normalize()\n    //           .multiply(fitting.width)\n    //           .sum(fitting.center);\n    //         let c = this.canvas.model.getLocalCoordinates(curve.x, curve.y);\n    //         this.ctx.bezierCurveTo(c.x, c.y, c.x, c.y, p2.x, p2.y);\n    //       } else {\n    //         this.ctx.lineTo(p2.x, p2.y);\n    //       }\n    //\n    //       if (this.canvas.model.overlap.first?.id === fitting.id) {\n    //         this.ctx.shadowBlur = 5;\n    //         this.ctx.shadowColor = \"gray\";\n    //       }\n    //\n    //       this.ctx.closePath();\n    //       this.ctx.stroke();\n    //       this.ctx.fillStyle = \"black\";\n    //       this.ctx.fill();\n    //     }\n    //     break;\n    //   case \"3d\":\n    //     {\n    //       let pipe1 = fitting.pipes[0];\n    //       let pipe2 = fitting.pipes[1];\n    //       let pipe3 = fitting.pipes[2];\n    //       let pipe1End,\n    //         pipe1OppositeEnd,\n    //         pipe2End,\n    //         pipe2OppositeEnd,\n    //         pipe3End,\n    //         pipe3OppositeEnd;\n    //\n    //       pipe1End =\n    //         pipe1.from.target?.id === fitting.id ? pipe1.from : pipe1.to;\n    //       pipe1OppositeEnd = pipe1End.getOpposite();\n    //\n    //       pipe2End =\n    //         pipe2.from.target?.id === fitting.id ? pipe2.from : pipe2.to;\n    //       pipe2OppositeEnd = pipe2End.getOpposite();\n    //\n    //       pipe3End =\n    //         pipe3.from.target?.id === fitting.id ? pipe3.from : pipe3.to;\n    //       pipe3OppositeEnd = pipe3End.getOpposite();\n    //\n    //       if (\n    //         !pipe1End ||\n    //         !pipe2End ||\n    //         !pipe3End ||\n    //         !pipe3OppositeEnd ||\n    //         !pipe1OppositeEnd ||\n    //         !pipe2OppositeEnd\n    //       )\n    //         break;\n    //\n    //       let necks: Array<IVec> = [];\n    //       let fittingNormalized = [\n    //         pipe1OppositeEnd.vec.sub(pipe1End.vec).normalize(),\n    //         pipe2OppositeEnd.vec.sub(pipe2End.vec).normalize(),\n    //         pipe3OppositeEnd.vec.sub(pipe3End.vec).normalize(),\n    //       ];\n    //\n    //       fittingNormalized.sort((a, b) => {\n    //         return a.angle() - b.angle();\n    //       });\n    //\n    //       fittingNormalized.map((n) => {\n    //         necks.push(\n    //           n\n    //             .multiply(fitting.width)\n    //             .sub(n.multiply(fitting.width).perpendicular(\"right\"))\n    //             .sum(fitting.center),\n    //           n\n    //             .multiply(fitting.width)\n    //             .sub(n.multiply(fitting.width).perpendicular(\"left\"))\n    //             .sum(fitting.center)\n    //         );\n    //       });\n    //\n    //       necks.map((p, index) => {\n    //         let wP = this.canvas.model.getLocalCoordinates(p.x, p.y);\n    //\n    //         if (index === 0) this.ctx.moveTo(wP.x, wP.y);\n    //\n    //         this.ctx.lineTo(wP.x, wP.y);\n    //       });\n    //\n    //       this.ctx.closePath();\n    //       this.ctx.stroke();\n    //       this.ctx.fillStyle = \"black\";\n    //       this.ctx.fill();\n    //     }\n    //     break;\n    //   case \"4d\":\n    //     console.log(\"4d\");\n    //     break;\n    //   default:\n    //     console.warn(\"no type\");\n    // }\n    let wP = this.canvas.model.getLocalCoordinates(\n      fitting.center.x,\n      fitting.center.y\n    );\n\n    this.ctx.strokeStyle = \"red\";\n    this.ctx.arc(wP.x, wP.y, fitting.width / 2, 0, 2 * Math.PI);\n\n    if (this.canvas.model.overlap.first?.id === fitting.id) {\n      this.ctx.shadowBlur = 5;\n      this.ctx.shadowColor = \"gray\";\n    }\n\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  draw() {\n    this.drawFittings();\n  }\n}\n\nexport default Fitting;\n","import CanvasModel from \"../models/canvas.model\";\nimport PipeModel from \"../models/heating/pipe.model\";\nimport CanvasView from \"./canvas.view\";\nimport { IVec } from \"../../geometry/vect\";\nimport PipeGhostModel from \"../models/ghost/heating/pipe.model\";\n\nclass Pipe {\n  canvas: CanvasView;\n  ctx: CanvasRenderingContext2D;\n\n  constructor(\n    view: CanvasView,\n    model: CanvasModel,\n    ctx: CanvasRenderingContext2D\n  ) {\n    this.canvas = view;\n    this.ctx = ctx;\n  }\n\n  drawPipes() {\n    this.canvas.model.pipes.map((p) => {\n      this.drawPipe(p);\n    });\n  }\n\n  drawPipe(pipe: PipeModel) {\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    let from = this.canvas.model.getLocalCoordinates(\n      pipe.from.vec.x,\n      pipe.from.vec.y\n    );\n    let to = this.canvas.model.getLocalCoordinates(\n      pipe.to.vec.x,\n      pipe.to.vec.y\n    );\n\n    this.ctx.moveTo(from.x, from.y);\n    this.ctx.lineTo(to.x, to.y);\n\n    this.ctx.strokeStyle = pipe.color;\n    this.ctx.lineWidth = pipe.width;\n\n    if (this.canvas.model.overlap.first?.id === pipe.id) {\n      this.ctx.shadowBlur = 5;\n      this.ctx.shadowColor = pipe.color;\n    }\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.restore();\n  }\n\n  drawGhost(pipe: PipeGhostModel) {\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    let from = this.canvas.model.getLocalCoordinates(\n      pipe.from.vec.x,\n      pipe.from.vec.y\n    );\n    let to = this.canvas.model.getLocalCoordinates(\n      pipe.to.vec.x,\n      pipe.to.vec.y\n    );\n\n    this.ctx.moveTo(from.x, from.y);\n    this.ctx.lineTo(to.x, to.y);\n\n    this.ctx.strokeStyle = pipe.color;\n    this.ctx.lineWidth = pipe.width * 2;\n\n    this.ctx.stroke();\n    this.ctx.restore();\n\n    // if (pipe.from.target?.io) {\n    //   let _wp = pipe.from.target.io.getVecAbs();\n    //   this.ctx.save();\n    //   this.ctx.beginPath();\n    //   this.ctx.strokeStyle = \"red\";\n    //   this.ctx.arc(_wp.x, _wp.y, 5, 0, 2 * Math.PI);\n    //   this.ctx.fillStyle = \"#ADD8E6\";\n    //   this.ctx.fill();\n    //   this.ctx.restore();\n    // }\n    //\n    // if (pipe.to.target?.io) {\n    //   let _wp = pipe.to.target.io.getVecAbs();\n    //   this.ctx.save();\n    //   this.ctx.beginPath();\n    //   this.ctx.strokeStyle = \"red\";\n    //   this.ctx.arc(_wp.x, _wp.y, 5, 0, 2 * Math.PI);\n    //   this.ctx.fillStyle = \"#ADD8E6\";\n    //   this.ctx.fill();\n    //   this.ctx.restore();\n    // }\n  }\n}\n\nexport default Pipe;\n","import CanvasModel from \"../models/canvas.model\";\nimport CanvasView from \"./canvas.view\";\nimport { IVec, Vector } from \"../../geometry/vect\";\nimport RadiatorModel from \"../models/heating/radiator.model\";\nimport RadiatorGhostModel from \"../models/ghost/heating/radiator.model\";\n\nclass Radiator {\n  canvas: CanvasView;\n  ctx: CanvasRenderingContext2D;\n\n  constructor(\n    view: CanvasView,\n    model: CanvasModel,\n    ctx: CanvasRenderingContext2D\n  ) {\n    this.canvas = view;\n    this.ctx = ctx;\n  }\n\n  drawRadiators() {\n    this.canvas.model.radiators.map((radiator) => {\n      this.drawRadiator(radiator);\n    });\n  }\n\n  drawRadiator(radiator: RadiatorModel) {\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    let toCenter = radiator.objectCenter.sum(radiator.center);\n\n    let wP = this.canvas.model.getLocalCoordinates(\n      radiator.center.x,\n      radiator.center.y\n    );\n\n    this.ctx.rect(toCenter.x, toCenter.y, radiator.width, radiator.height);\n    this.ctx.stroke();\n    this.ctx.restore();\n\n    radiator.IOs.map((io) => {\n      let toCenter = io.getVecAbs();\n      let wP = this.canvas.model.getLocalCoordinates(toCenter.x, toCenter.y);\n\n      this.ctx.save();\n      this.ctx.beginPath();\n      this.ctx.strokeStyle = \"red\";\n      this.ctx.arc(wP.x, wP.y, 5, 0, 2 * Math.PI);\n      this.ctx.fillStyle = io.type === \"supply\" ? \"red\" : \"blue\";\n      this.ctx.fill();\n      this.ctx.restore();\n    });\n  }\n\n  drawGhost(radiator: RadiatorGhostModel) {\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    let toCenter = new Vector(-radiator.width / 2, -radiator.height / 2).sum(\n      radiator.center\n    );\n\n    let wP = this.canvas.model.getLocalCoordinates(toCenter.x, toCenter.y);\n\n    this.ctx.strokeStyle = \"red\";\n    this.ctx.rect(wP.x, wP.y, radiator.width, radiator.height);\n    this.ctx.stroke();\n    this.ctx.restore();\n\n    radiator.IOs.map((io) => {\n      let toCenter = new Vector(-radiator.width / 2, -radiator.height / 2).sum(\n        radiator.center.sum(io.vec)\n      );\n\n      let wP = this.canvas.model.getLocalCoordinates(toCenter.x, toCenter.y);\n\n      // this.ctx.save();\n      // this.ctx.beginPath();\n      // this.ctx.strokeStyle = \"red\";\n      // this.ctx.arc(wP.x, wP.y, 5, 0, 2 * Math.PI);\n      // this.ctx.fillStyle = io.type === \"supply\" ? \"red\" : \"blue\";\n      // this.ctx.fill();\n      // this.ctx.restore();\n    });\n  }\n\n  draw() {\n    this.drawRadiators();\n\n    if (\n      this.canvas.model.placingObject &&\n      this.canvas.model.placingObject instanceof RadiatorGhostModel\n    ) {\n      this.drawGhost(this.canvas.model.placingObject);\n    }\n  }\n}\n\nexport default Radiator;\n","import CanvasModel from \"../models/canvas.model\";\n\nclass Stats {\n  model: CanvasModel;\n  container: HTMLElement | null;\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n    this.container = document.querySelector(\"#stats\");\n    this.init();\n  }\n\n  init() {\n    this.initContainer();\n  }\n\n  render() {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div style=\"display: flex; flex-direction: column\">\n        <div>x - ${Math.round(this.model.offset.x)} \n        / y - ${Math.round(this.model.offset.y)}</div>\n        \n        <div>x - ${Math.round(this.model.mouse?.x ?? 0)} \n        / y - ${Math.round(this.model.mouse?.y ?? 0)}</div>\n        \n        <div>scale - ${this.model.scale.amount}</div>\n        <div>width - ${this.model.canvasSize?.x} / height - ${\n      this.model.canvasSize?.y\n    } / </div>\n        <div>ratio x ${this.model.mouseCanvasRatio?.x} / y ${\n      this.model.mouseCanvasRatio?.y\n    }</div>\n        <div>action mode is ${this.model.actionMode}</div>\n      </div>\n      </div>\n        <div>mode is ${this.model.mode}</div>\n      </div>\n      \n      </div>\n        <div>fitting size is ${this.model.fittings.length}</div>\n        <div>pipes size is ${this.model.pipes.length}</div>\n      </div>\n      </div>\n        <div>hovered object ${\n          this.model.getPipeByID(\n            this.model.overlap.list.length > 0 && this.model.overlap.list[0].id\n              ? this.model.overlap.list[0].id\n              : \"\"\n          )?.id\n        }</div>\n        <div>pipes size is ${this.model.pipes.length}</div>\n      </div>\n    `;\n  }\n\n  initContainer(): void {\n    if (!this.container) return;\n\n    this.container.style.height = \"450px\";\n    this.container.style.width = \"300px\";\n    this.container.style.border = \"1px solid black\";\n    this.container.style.marginLeft = \"10px\";\n  }\n}\n\nexport default Stats;\n","import CanvasModel from \"../models/canvas.model\";\nimport PipeModel from \"../models/heating/pipe.model\";\nimport CanvasView from \"./canvas.view\";\nimport ValveModel from \"../models/heating/valve.model\";\nimport ValveGhostModel from \"../models/ghost/heating/valve.model\";\nimport { Vector } from \"../../geometry/vect\";\n\nclass Valve {\n  canvas: CanvasView;\n  ctx: CanvasRenderingContext2D;\n\n  constructor(\n    view: CanvasView,\n    model: CanvasModel,\n    ctx: CanvasRenderingContext2D\n  ) {\n    this.canvas = view;\n    this.ctx = ctx;\n  }\n\n  drawGhost(valve: ValveGhostModel) {\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    let normVector, normVectorReversed;\n\n    if (valve.pipes.length == 0) {\n      normVector = new Vector(1, 0);\n      normVectorReversed = normVector.reverse();\n    } else {\n      let valvePipe = valve.pipes[0]; // get one from two pipe for angle detection\n      let pipeEnd =\n        valvePipe.from.target?.id === valve.id ? valvePipe.from : valvePipe.to;\n      let pipeOppositeEnd = pipeEnd.getOpposite();\n      normVector = pipeOppositeEnd.vec.sub(pipeEnd.vec).normalize();\n      normVectorReversed = normVector.reverse();\n    }\n\n    let points = [];\n\n    points.push(\n      normVector\n        .multiply(valve.width)\n        .perpendicular(\"left\")\n        .sum(normVector.multiply(valve.length))\n        .sum(valve.center),\n      normVector\n        .multiply(valve.width)\n        .perpendicular(\"right\")\n        .sum(normVector.multiply(valve.length))\n        .sum(valve.center),\n      normVector.sum(valve.center),\n      normVectorReversed\n        .multiply(valve.width)\n        .perpendicular(\"left\")\n        .sum(normVectorReversed.multiply(valve.length))\n        .sum(valve.center),\n      normVectorReversed\n        .multiply(valve.width)\n        .perpendicular(\"right\")\n        .sum(normVectorReversed.multiply(valve.length))\n        .sum(valve.center),\n      normVector.sum(valve.center)\n    );\n\n    points.map((p, index) => {\n      let wP = this.canvas.model.getLocalCoordinates(p.x, p.y);\n\n      if (index === 0) this.ctx.moveTo(wP.x, wP.y);\n\n      this.ctx.lineTo(wP.x, wP.y);\n    });\n\n    this.ctx.lineWidth = 2;\n    this.ctx.closePath();\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    let wP = this.canvas.model.getLocalCoordinates(\n      valve.center.x,\n      valve.center.y\n    );\n    this.ctx.moveTo(wP.x, wP.y);\n    this.ctx.arc(wP.x, wP.y, valve.radius, 0, 2 * Math.PI);\n    this.ctx.stroke();\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  drawValves() {\n    this.canvas.model.valves.map((v) => {\n      this.drawValve(v);\n    });\n  }\n\n  drawValve(valve: ValveModel) {\n    if (valve.pipes.length == 0) return;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    let valvePipe = valve.pipes[0]; // get one from two pipe for angle detection\n    let pipeEnd =\n      valvePipe.from.target?.id === valve.id ? valvePipe.from : valvePipe.to;\n    let pipeOppositeEnd = pipeEnd.getOpposite();\n    let normVector = pipeOppositeEnd.vec.sub(pipeEnd.vec).normalize();\n    let normVectorReversed = normVector.reverse();\n\n    let points = [];\n\n    points.push(\n      normVector\n        .multiply(valve.width)\n        .perpendicular(\"left\")\n        .sum(normVector.multiply(valve.length))\n        .sum(valve.center),\n      normVector\n        .multiply(valve.width)\n        .perpendicular(\"right\")\n        .sum(normVector.multiply(valve.length))\n        .sum(valve.center),\n      normVector.sum(valve.center),\n      normVectorReversed\n        .multiply(valve.width)\n        .perpendicular(\"left\")\n        .sum(normVectorReversed.multiply(valve.length))\n        .sum(valve.center),\n      normVectorReversed\n        .multiply(valve.width)\n        .perpendicular(\"right\")\n        .sum(normVectorReversed.multiply(valve.length))\n        .sum(valve.center),\n      normVector.sum(valve.center)\n    );\n\n    points.map((p, index) => {\n      let wP = this.canvas.model.getLocalCoordinates(p.x, p.y);\n\n      if (index === 0) this.ctx.moveTo(wP.x, wP.y);\n\n      this.ctx.lineTo(wP.x, wP.y);\n    });\n\n    this.ctx.lineWidth = 2;\n    this.ctx.closePath();\n    this.ctx.stroke();\n\n    this.ctx.beginPath();\n    let wP = this.canvas.model.getLocalCoordinates(\n      valve.center.x,\n      valve.center.y\n    );\n    this.ctx.moveTo(wP.x, wP.y);\n    this.ctx.arc(wP.x, wP.y, valve.radius, 0, 2 * Math.PI);\n    this.ctx.stroke();\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fill();\n    this.ctx.restore();\n  }\n\n  draw() {\n    this.drawValves();\n\n    if (\n      this.canvas.model.placingObject &&\n      this.canvas.model.placingObject instanceof ValveGhostModel\n    ) {\n      this.drawGhost(this.canvas.model.placingObject);\n    }\n  }\n}\n\nexport default Valve;\n","import Pipe from \"../2d/models/heating/pipe.model\";\nimport { IVec, Vector } from \"../geometry/vect\";\nimport CanvasModel from \"../2d/models/canvas.model\";\nimport Line from \"../2d/models/geometry/line.model\";\n\nexport const fittingModel = (model: CanvasModel) => {\n  let pipes = model.pipes;\n  let step = model.config.net.step / 2;\n\n  // _2Pipes(model, pipes, step);\n  // _3Pipes(model, pipes, step);\n  // performanceCheck(model, pipes, step);\n};\n\nconst _2Pipes = (model: CanvasModel, pipes: Array<Pipe>, step: number) => {\n  /**\n   * 90 angle from right to left\n   * ------ *\n   *        |\n   *        |\n   *        |\n   *\n   * Y+ is bottom\n   */\n  let arraysRL90 = [\n    /*\n      1 - from left to right\n      2 - from top to bottom\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 10,\n        y2: 4,\n      },\n      {\n        x1: 10,\n        y1: 4,\n        x2: 10,\n        y2: 10,\n      },\n    ],\n    /*\n      1 - from right to left\n      2 - from top to bottom\n     */\n    [\n      {\n        x1: 10,\n        y1: 4,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 10,\n        y1: 4,\n        x2: 10,\n        y2: 10,\n      },\n    ],\n    /*\n      1 - from left to right\n      2 - from bottom to top\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 10,\n        y2: 4,\n      },\n      {\n        x1: 10,\n        y1: 10,\n        x2: 10,\n        y2: 4,\n      },\n    ],\n    /*\n      1 - from right to left\n      2 - from bottom to top\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 10,\n        y2: 4,\n      },\n      {\n        x1: 10,\n        y1: 10,\n        x2: 10,\n        y2: 4,\n      },\n    ],\n  ];\n\n  /**\n   *  90 angle from left to right\n   *    * -------\n   *    |\n   *    |\n   *    |\n   */\n  let arraysLR90 = [\n    /*\n      2 - from left to right\n      1 - from top to bottom\n     */\n    [\n      {\n        x1: 10,\n        y1: 4,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 4,\n        y1: 4,\n        x2: 4,\n        y2: 10,\n      },\n    ],\n    /*\n      1 - from left top to right\n      2 - from top to bottom\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 10,\n        y2: 4,\n      },\n      {\n        x1: 4,\n        y1: 4,\n        x2: 4,\n        y2: 10,\n      },\n    ],\n    /*\n      1 - from right to left\n      2 - from bottom to top\n     */\n    [\n      {\n        x1: 10,\n        y1: 4,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 4,\n        y1: 10,\n        x2: 4,\n        y2: 4,\n      },\n    ],\n    /*\n      1 - from left to right\n      2 - from bottom to top\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 10,\n        y2: 4,\n      },\n      {\n        x1: 4,\n        y1: 10,\n        x2: 4,\n        y2: 4,\n      },\n    ],\n  ];\n\n  /**\n   *  Down V from 90 angle\n   *           *\n   *          / \\\n   *        /    \\\n   *      /       \\\n   *    /          \\\n   */\n  let arraysV90Down = [\n    /*\n      1 - from left to right,\n      2 - from left to right\n     */\n    [\n      {\n        x1: 4,\n        y1: 6,\n        x2: 8,\n        y2: 2,\n      },\n      {\n        x1: 8,\n        y1: 2,\n        x2: 12,\n        y2: 6,\n      },\n    ],\n    /*\n      1 - from right to left,\n      2 - from left to right,\n     */\n    [\n      {\n        x1: 8,\n        y1: 2,\n        x2: 4,\n        y2: 6,\n      },\n      {\n        x1: 8,\n        y1: 2,\n        x2: 12,\n        y2: 6,\n      },\n    ],\n    /*\n     1 - from left to right,\n     2 - from right to left,\n    */\n    [\n      {\n        x1: 4,\n        y1: 6,\n        x2: 8,\n        y2: 2,\n      },\n      {\n        x1: 12,\n        y1: 6,\n        x2: 8,\n        y2: 2,\n      },\n    ],\n    /*\n     1 - from right to left,\n     2 - from right to left,\n    */\n    [\n      {\n        x1: 8,\n        y1: 2,\n        x2: 4,\n        y2: 6,\n      },\n      {\n        x1: 12,\n        y1: 6,\n        x2: 8,\n        y2: 2,\n      },\n    ],\n  ];\n\n  /**\n   *  V form 90 angle\n   *   \\       /\n   *    \\     /\n   *     \\   /\n   *      \\ /\n   *       *\n   */\n  let arraysV90Up = [\n    /*\n      1 - from left to right,\n      2 - from left to right\n     */\n    [\n      {\n        x1: 4,\n        y1: 2,\n        x2: 8,\n        y2: 6,\n      },\n      {\n        x1: 8,\n        y1: 6,\n        x2: 12,\n        y2: 2,\n      },\n    ],\n    /*\n      1 - from right to left,\n      2 - from left to right,\n     */\n    [\n      {\n        x1: 8,\n        y1: 6,\n        x2: 4,\n        y2: 2,\n      },\n      {\n        x1: 8,\n        y1: 6,\n        x2: 12,\n        y2: 2,\n      },\n    ],\n    /*\n     1 - from left to right,\n     2 - from right to left,\n    */\n    [\n      {\n        x1: 4,\n        y1: 2,\n        x2: 8,\n        y2: 6,\n      },\n      {\n        x1: 12,\n        y1: 2,\n        x2: 8,\n        y2: 6,\n      },\n    ],\n    /*\n     1 - from right to left,\n     2 - from right to left,\n    */\n    [\n      {\n        x1: 8,\n        y1: 6,\n        x2: 4,\n        y2: 2,\n      },\n      {\n        x1: 12,\n        y1: 2,\n        x2: 8,\n        y2: 6,\n      },\n    ],\n  ];\n\n  /**\n   * Horizontal same angle\n   *  --------- * ----------\n   */\n  let arrays90H = [\n    /*\n      1 - from left to right\n      2 - from left to right,\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 8,\n        y2: 4,\n      },\n      {\n        x1: 8,\n        y1: 4,\n        x2: 12,\n        y2: 4,\n      },\n    ],\n    /*\n      1 - from right to left\n      2 - from left to right,\n     */\n    [\n      {\n        x1: 8,\n        y1: 4,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 8,\n        y1: 4,\n        x2: 12,\n        y2: 4,\n      },\n    ],\n    /*\n      1 - from left to right\n      2 - from right to left,\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 8,\n        y2: 4,\n      },\n      {\n        x1: 12,\n        y1: 4,\n        x2: 8,\n        y2: 4,\n      },\n    ],\n    /*\n      1 - from right to left\n      2 - from right to left,\n     */\n    [\n      {\n        x1: 8,\n        y1: 4,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 12,\n        y1: 4,\n        x2: 8,\n        y2: 4,\n      },\n    ],\n  ];\n\n  /**\n   *  Vertical same angle\n   *    |\n   *    |\n   *    |\n   *    *\n   *    |\n   *    |\n   *    |\n   */\n  let arrays90V = [\n    /*\n      1 - from top to bottom\n      2 - from top to bottom\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 4,\n        y2: 8,\n      },\n      {\n        x1: 4,\n        y1: 8,\n        x2: 4,\n        y2: 12,\n      },\n    ],\n    /*\n      1 - from bottom to top\n      2 - from top to bottom\n     */\n    [\n      {\n        x1: 4,\n        y1: 8,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 4,\n        y1: 8,\n        x2: 4,\n        y2: 12,\n      },\n    ],\n    /*\n      1 - from top to bottom\n      2 - from bottom to top\n     */\n    [\n      {\n        x1: 4,\n        y1: 4,\n        x2: 4,\n        y2: 8,\n      },\n      {\n        x1: 4,\n        y1: 12,\n        x2: 4,\n        y2: 8,\n      },\n    ],\n    /*\n      1 - from bottom to top\n      2 - from bottom to top\n     */\n    [\n      {\n        x1: 4,\n        y1: 8,\n        x2: 4,\n        y2: 4,\n      },\n      {\n        x1: 4,\n        y1: 12,\n        x2: 4,\n        y2: 8,\n      },\n    ],\n  ];\n\n  [...arraysRL90, ...arraysLR90].map((lines, index) => {\n    if (index > 1) return;\n    lines.map((line) => {\n      pipes.push(\n        new Pipe(\n          model,\n          new Vector(100 * index + line.x1 * step, line.y1 * step),\n          new Vector(100 * index + line.x2 * step, line.y2 * step)\n        )\n      );\n    });\n  });\n  return;\n  [...arraysV90Down, ...arraysV90Up].map((lines, index) => {\n    lines.map((line) => {\n      pipes.push(\n        new Pipe(\n          model,\n          new Vector(100 * index + line.x1 * step, 12 * step + line.y1 * step),\n          new Vector(100 * index + line.x2 * step, 12 * step + line.y2 * step)\n        )\n      );\n    });\n  });\n\n  arrays90H.map((lines, index) => {\n    lines.map((line) => {\n      pipes.push(\n        new Pipe(\n          model,\n          new Vector(100 * index + line.x1 * step, 18 * step + line.y1 * step),\n          new Vector(100 * index + line.x2 * step, 18 * step + line.y2 * step)\n        )\n      );\n    });\n  });\n\n  arrays90V.map((lines, index) => {\n    lines.map((line) => {\n      pipes.push(\n        new Pipe(\n          model,\n          new Vector(100 * index + line.x1 * step, 22 * step + line.y1 * step),\n          new Vector(100 * index + line.x2 * step, 22 * step + line.y2 * step)\n        )\n      );\n    });\n  });\n\n  [0, 30, 60, 90].map((a, index) => {\n    let pV1 = new Vector(4, 4);\n    let pV2 = new Vector(8, 4).rotate(a, pV1);\n\n    let v1 = new Vector(pV2.x, pV2.y);\n    let v2 = new Vector(pV2.x + 4, pV2.y).rotate(a, v1);\n\n    pipes.push(\n      new Pipe(\n        model,\n        new Vector(400 + 100 * index + pV1.x * step, 22 * step + pV1.y * step),\n        new Vector(400 + 100 * index + pV2.x * step, 22 * step + pV2.y * step)\n      )\n    );\n\n    pipes.push(\n      new Pipe(\n        model,\n        new Vector(400 + 100 * index + v1.x * step, 22 * step + v1.y * step),\n        new Vector(400 + 100 * index + v2.x * step, 22 * step + v2.y * step)\n      )\n    );\n  });\n\n  // horizontal line with angles\n  [0, 30, 60, 90, 120, 150, 180].map((a, index) => {\n    let pV1 = new Vector(4, 4);\n    let pV2 = new Vector(8, 4);\n\n    let v1 = new Vector(8, 4);\n    let v2 = new Vector(12, 4).rotate(a, v1);\n\n    pipes.push(\n      new Pipe(\n        model,\n        new Vector(100 * index + pV1.x * step, 32 * step + pV1.y * step),\n        new Vector(100 * index + pV2.x * step, 32 * step + pV2.y * step)\n      )\n    );\n\n    pipes.push(\n      new Pipe(\n        model,\n        new Vector(100 * index + v1.x * step, 32 * step + v1.y * step),\n        new Vector(100 * index + v2.x * step, 32 * step + v2.y * step)\n      )\n    );\n  });\n\n  [0, -30, -60, -90, -120, -150, -180].map((a, index) => {\n    let pV1 = new Vector(4, 4);\n    let pV2 = new Vector(8, 4);\n\n    let v1 = new Vector(8, 4);\n    let v2 = new Vector(12, 4).rotate(a, v1);\n\n    pipes.push(\n      new Pipe(\n        model,\n        new Vector(100 * index + pV1.x * step, 42 * step + pV1.y * step),\n        new Vector(100 * index + pV2.x * step, 42 * step + pV2.y * step)\n      )\n    );\n\n    pipes.push(\n      new Pipe(\n        model,\n        new Vector(100 * index + v1.x * step, 42 * step + v1.y * step),\n        new Vector(100 * index + v2.x * step, 42 * step + v2.y * step)\n      )\n    );\n  });\n};\n\nconst _3Pipes = (model: CanvasModel, pipes: Array<Pipe>, step: number) => {\n  let combinationGroupOffset = step * 2;\n  let yOffsetStep = 10;\n  /**\n   *   90 angle down\n   *\n   *   --------- * ----------\n   *             |\n   *             |\n   *             |\n   */\n  [\n    [1, 1, 1],\n    [1, 1, -1],\n    [1, -1, 1],\n    [1, -1, -1],\n    [-1, 1, 1],\n    [-1, 1, -1],\n    [-1, -1, 1],\n    [-1, -1, -1],\n  ].map((combination, combinationIndex) => {\n    combination.map((direction, index) => {\n      let vec1: IVec;\n      let vec2: IVec;\n\n      if (index === 0) {\n        if (direction === 1) {\n          vec1 = new Vector(4, 4);\n          vec2 = new Vector(8, 4);\n        } else {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(4, 4);\n        }\n      } else if (index === 1) {\n        if (direction === 1) {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(8, 8);\n        } else {\n          vec1 = new Vector(8, 8);\n          vec2 = new Vector(8, 4);\n        }\n      } else {\n        if (direction === 1) {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(12, 4);\n        } else {\n          vec1 = new Vector(12, 4);\n          vec2 = new Vector(8, 4);\n        }\n      }\n\n      let offsetX = 100 * (combinationIndex % 8);\n      let offsetY = combinationGroupOffset;\n\n      vec1.x = offsetX + vec1.x * step;\n      vec1.y = offsetY + vec1.y * step;\n      vec2.x = offsetX + vec2.x * step;\n      vec2.y = offsetY + vec2.y * step;\n\n      pipes.push(new Pipe(model, vec1, vec2));\n    });\n  });\n  combinationGroupOffset += yOffsetStep * step;\n\n  /**\n   *   90 angle up\n   *\n   *             |\n   *             |\n   *             |\n   *   --------- * ----------\n   */\n  [\n    [1, 1, 1],\n    [1, 1, -1],\n    [1, -1, 1],\n    [1, -1, -1],\n    [-1, 1, 1],\n    [-1, 1, -1],\n    [-1, -1, 1],\n    [-1, -1, -1],\n  ].map((combination, combinationIndex) => {\n    combination.map((direction, index) => {\n      let vec1: IVec;\n      let vec2: IVec;\n\n      if (index === 0) {\n        if (direction === 1) {\n          vec1 = new Vector(4, 4);\n          vec2 = new Vector(8, 4);\n        } else {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(4, 4);\n        }\n      } else if (index === 1) {\n        if (direction === 1) {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(8, 0);\n        } else {\n          vec1 = new Vector(8, 0);\n          vec2 = new Vector(8, 4);\n        }\n      } else {\n        if (direction === 1) {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(12, 4);\n        } else {\n          vec1 = new Vector(12, 4);\n          vec2 = new Vector(8, 4);\n        }\n      }\n\n      let offsetX = 100 * (combinationIndex % 8);\n      let offsetY = combinationGroupOffset;\n\n      vec1.x = offsetX + vec1.x * step;\n      vec1.y = offsetY + vec1.y * step;\n      vec2.x = offsetX + vec2.x * step;\n      vec2.y = offsetY + vec2.y * step;\n\n      pipes.push(new Pipe(model, vec1, vec2));\n    });\n  });\n\n  combinationGroupOffset += yOffsetStep * step;\n\n  /**\n   *   90 angle left\n   *\n   *              |\n   *              |\n   *    --------- *\n   *              |\n   *              |\n   *\n   */\n  [\n    [1, 1, 1],\n    [1, 1, -1],\n    [1, -1, 1],\n    [1, -1, -1],\n    [-1, 1, 1],\n    [-1, 1, -1],\n    [-1, -1, 1],\n    [-1, -1, -1],\n  ].map((combination, combinationIndex) => {\n    combination.map((direction, index) => {\n      let vec1: IVec;\n      let vec2: IVec;\n\n      if (index === 0) {\n        if (direction === 1) {\n          vec1 = new Vector(8, 0);\n          vec2 = new Vector(8, 4);\n        } else {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(8, 0);\n        }\n      } else if (index === 1) {\n        if (direction === 1) {\n          vec1 = new Vector(4, 4);\n          vec2 = new Vector(8, 4);\n        } else {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(4, 4);\n        }\n      } else {\n        if (direction === 1) {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(8, 8);\n        } else {\n          vec1 = new Vector(8, 8);\n          vec2 = new Vector(8, 4);\n        }\n      }\n\n      let offsetX = 100 * (combinationIndex % 8);\n      let offsetY = combinationGroupOffset;\n\n      vec1.x = offsetX + vec1.x * step;\n      vec1.y = offsetY + vec1.y * step;\n      vec2.x = offsetX + vec2.x * step;\n      vec2.y = offsetY + vec2.y * step;\n\n      pipes.push(new Pipe(model, vec1, vec2));\n    });\n  });\n\n  combinationGroupOffset += yOffsetStep * step;\n  /**\n   *   90 angle right\n   *\n   *    |\n   *    |\n   *    *---------\n   *    |\n   *    |\n   *\n   */\n  [\n    [1, 1, 1],\n    [1, 1, -1],\n    [1, -1, 1],\n    [1, -1, -1],\n    [-1, 1, 1],\n    [-1, 1, -1],\n    [-1, -1, 1],\n    [-1, -1, -1],\n  ].map((combination, combinationIndex) => {\n    combination.map((direction, index) => {\n      let vec1: IVec;\n      let vec2: IVec;\n\n      if (index === 0) {\n        if (direction === 1) {\n          vec1 = new Vector(4, 0);\n          vec2 = new Vector(4, 4);\n        } else {\n          vec1 = new Vector(4, 4);\n          vec2 = new Vector(4, 0);\n        }\n      } else if (index === 1) {\n        if (direction === 1) {\n          vec1 = new Vector(4, 4);\n          vec2 = new Vector(8, 4);\n        } else {\n          vec1 = new Vector(8, 4);\n          vec2 = new Vector(4, 4);\n        }\n      } else {\n        if (direction === 1) {\n          vec1 = new Vector(4, 4);\n          vec2 = new Vector(4, 8);\n        } else {\n          vec1 = new Vector(4, 8);\n          vec2 = new Vector(4, 4);\n        }\n      }\n\n      let offsetX = 100 * (combinationIndex % 8);\n      let offsetY = combinationGroupOffset;\n\n      vec1.x = offsetX + vec1.x * step;\n      vec1.y = offsetY + vec1.y * step;\n      vec2.x = offsetX + vec2.x * step;\n      vec2.y = offsetY + vec2.y * step;\n\n      pipes.push(new Pipe(model, vec1, vec2));\n    });\n  });\n\n  combinationGroupOffset += yOffsetStep * step;\n};\n\nconst performanceCheck = (\n  model: CanvasModel,\n  pipes: Array<Pipe>,\n  step: number\n) => {\n  new Array(10000).fill(undefined).map((value, index) => {\n    let vec1: IVec;\n    let vec2: IVec;\n\n    vec1 = new Vector(4, 4);\n    vec2 = new Vector(8, 4);\n\n    let offsetX = 100 * (index % 8);\n    let offsetY = 20 * Math.round(index / 8);\n\n    vec1.x = offsetX + vec1.x * step;\n    vec1.y = offsetY + vec1.y * step;\n    vec2.x = offsetX + vec2.x * step;\n    vec2.y = offsetY + vec2.y * step;\n\n    pipes.push(new Pipe(model, vec1, vec2));\n  });\n};\n","import { default as _2DController } from \"./2d\";\n\ndeclare global {\n  interface Window {\n    app: App;\n  }\n}\n\nclass App {\n  _2d: _2DController = new _2DController();\n\n  run() {\n    window.app = this;\n\n    window.requestAnimationFrame(this.step.bind(this));\n  }\n\n  step() {\n    this._2d.canvas.view.draw();\n    window.requestAnimationFrame(this.step.bind(this));\n  }\n}\n\nexport default App;\n","import Line from \"../2d/models/geometry/line.model\";\n\nexport class Vector implements IVec {\n  x: number;\n  y: number;\n  z: number;\n\n  constructor(x: number, y: number, z: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  distanceTo(v: IVec) {\n    let _v = new Vector(this.x - v.x, this.y - v.y);\n    return _v.length;\n  }\n\n  distanceToLine(l: Line): number {\n    let ret: number;\n    let lVec = l.to.vec.sub(l.from.vec);\n    let vec = this.sub(l.from.vec);\n    let angle = vec.angle(lVec);\n\n    if (vec.length === 0) console.warn(\"ops\");\n\n    let p = lVec.product(vec);\n    let p1 = vec.product(vec);\n\n    let param = -1;\n\n    if (p !== 0) param = p1 / p;\n\n    if (param < 0) {\n      ret = Math.round(vec.length);\n    } else if (param > 1) {\n      ret = Math.round(lVec.sub(vec).length);\n    } else {\n      ret = Math.round(Math.sin(angle) * vec.length);\n    }\n\n    return ret;\n  }\n\n  get length() {\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  projection(b: IVec) {\n    return this.product(b) / Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  sub(v: IVec): Vector {\n    return new Vector(this.x - v.x, this.y - v.y);\n  }\n\n  sum(v: IVec): Vector {\n    return new Vector(this.x + v.x, this.y + v.y);\n  }\n\n  angle(v: IVec | undefined = undefined) {\n    if (v) {\n      // return Math.atan2(\n      //   this.x * v.y - this.y * v.x,\n      //   this.x * v.x + this.y * v.y\n      // );\n      // console.log(\"this.length\", this.length, v.length);\n      return Math.acos(\n        Math.min(1, (this.x * v.x + this.y * v.y) / (this.length * v.length))\n      );\n    }\n\n    return Math.atan2(this.y, this.x);\n  }\n\n  angle1(v: IVec) {\n    return Math.atan2(this.x * v.y - v.x * this.y, this.x * v.x + this.y * v.y);\n  }\n\n  product(v: IVec): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  normalize() {\n    if (this.length === 0) {\n      console.warn(\"v is zero\");\n      new Vector(0, 0);\n    }\n    return new Vector(this.x / this.length, this.y / this.length);\n  }\n\n  multiply(a: number) {\n    return new Vector(this.x * a, this.y * a);\n  }\n\n  perpendicular(side: \"left\" | \"right\" = \"left\") {\n    if (side === \"left\") {\n      return new Vector(this.y, -this.x);\n    } else {\n      return new Vector(-this.y, this.x);\n    }\n  }\n\n  reverse() {\n    return new Vector(-this.x, -this.y);\n  }\n\n  clone() {\n    return new Vector(this.x, this.y);\n  }\n\n  bindNet(step: number) {\n    return new Vector(\n      Math.round(this.x / step) * step,\n      Math.round(this.y / step) * step\n    );\n  }\n\n  drawVector() {\n    //debug only\n    setTimeout(() => {\n      let container: HTMLCanvasElement | null =\n        document.querySelector(\"#editor\");\n\n      if (container) {\n        const ctx = container.getContext(\"2d\");\n\n        if (!ctx) return;\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"black\";\n        ctx.fill();\n        ctx.restore();\n      }\n    }, 0);\n  }\n\n  rotate(angle: number, around: IVec | undefined = undefined) {\n    let { x, y } = this;\n    angle *= Math.PI / 180;\n\n    if (around) {\n      x = this.x - around.x;\n      y = this.y - around.y;\n    }\n\n    let v = new Vector(\n      x * Math.cos(angle) - y * Math.sin(angle),\n      x * Math.sin(angle) + y * Math.cos(angle)\n    );\n\n    if (around) {\n      v = v.sum(around);\n    }\n\n    return v;\n  }\n\n  scalar(v: IVec) {\n    return this.x * v.x + this.y * v.y;\n  }\n}\n\nexport interface IVec extends ICoord {\n  length: number;\n  distanceTo: (v: IVec) => number;\n  sub: (v: IVec) => IVec;\n  sum: (v: IVec) => IVec;\n  distanceToLine: (l: Line) => number;\n  perpendicular: (side: \"left\" | \"right\") => IVec;\n  reverse: () => IVec;\n  angle: (v?: IVec) => number;\n  angle1: (v: IVec) => number;\n  projection: (v: IVec) => number;\n  normalize: () => Vector;\n  multiply: (n: number) => IVec;\n  product: (v: IVec) => number;\n  clone: () => IVec;\n  bindNet: (step: number) => IVec;\n  drawVector: () => void;\n  rotate: (angle: number, around?: IVec) => IVec;\n  scalar: (v: IVec) => number;\n}\n\nexport interface ICoord {\n  x: number;\n  y: number;\n  z: number;\n}\n","import App from './app';\n\nconst app = new App();\n\napp.run();","import CanvasModel from \"../../2d/models/canvas.model\";\nimport InfoPanelView from \"../view/info-panel.view\";\n\nclass InfoPanel {\n  view: InfoPanelView;\n  model: CanvasModel;\n  panelModel: {} = {};\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n    this.view = new InfoPanelView(this.panelModel);\n\n    if (this.view.pipeModeFrame) {\n      this.view.pipeModeFrame.addEventListener(\n        \"click\",\n        this.pipeModeHandle.bind(this)\n      );\n    }\n\n    if (this.view.pipeType) {\n      this.view.pipeType.forEach((e) => {\n        e.addEventListener(\"change\", this.pipeTypeHandle.bind(this));\n      });\n    }\n  }\n\n  pipeModeHandle() {}\n  pipeTypeHandle(e: Event) {\n    let cT = e.currentTarget as HTMLInputElement;\n    let value = cT.value;\n\n    if (value === \"supply\" || value === \"return\") {\n      this.model.updateSubMode(value);\n    }\n  }\n}\n\nexport default InfoPanel;\n","import CanvasModel from \"../../2d/models/canvas.model\";\nimport ToolbarView from \"../view/toolbar.view\";\n\nclass Toolbar {\n  view: ToolbarView;\n  model: CanvasModel;\n  toolbarModel: { menu: ToolbarMenu; subMenu?: string } = { menu: \"default\" }; // now it is small object. if it gets bigger move it\n\n  constructor(model: CanvasModel) {\n    this.model = model;\n    this.view = new ToolbarView(this.toolbarModel);\n\n    if (this.view.menuItems) {\n      Array.from(this.view.menuItems).map((e) => {\n        e.addEventListener(\"click\", this.handleMenu.bind(this));\n      });\n    }\n\n    if (this.view.subMenuItems) {\n      Array.from(this.view.subMenuItems).map((e) => {\n        e.addEventListener(\"click\", this.handleMode.bind(this));\n      });\n    }\n  }\n\n  handleMenu(e: Event) {\n    let cT = e.currentTarget as HTMLElement;\n    let value = cT.id;\n\n    switch (value) {\n      case \"toolbar_selection\":\n        this.model.updateMode(\"default\");\n        this.toolbarModel.menu = \"default\";\n        break;\n      case \"toolbar_heating\":\n        this.toolbarModel.menu = \"heating\";\n        break;\n      case \"toolbar_architecture\":\n        this.toolbarModel.menu = \"architecture\";\n        break;\n      case \"toolbar_ventilation\":\n        this.toolbarModel.menu = \"ventilation\";\n        break;\n      default:\n        this.model.updateMode(\"default\");\n        this.toolbarModel.menu = \"default\";\n    }\n\n    this.view.render();\n  }\n\n  handleMode(e: Event) {\n    let cT = e.currentTarget as HTMLInputElement;\n    let value = cT.getAttribute(\"data-value\");\n\n    if (\n      value === \"default\" ||\n      value === \"wall\" ||\n      value === \"pipe\" ||\n      value === \"radiator\" ||\n      value === \"valve\"\n    ) {\n      this.model.updateMode(value);\n    }\n  }\n}\n\nexport type ToolbarMenu =\n  | \"default\"\n  | \"architecture\"\n  | \"heating\"\n  | \"ventilation\";\nexport type ToolbarMode = \"default\" | \"wall\" | \"pipe\" | \"valve\" | \"radiator\";\n\nexport default Toolbar;\n","class InfoPanel {\n  model: {};\n  container: HTMLElement | null;\n  pipeModeFrame: HTMLElement | null;\n  pipeType: NodeListOf<HTMLInputElement> | null;\n\n  constructor(model: {}) {\n    this.model = model;\n    this.container = document.querySelector(\"#infoPanel\");\n    this.pipeModeFrame = document.querySelector(\"#pipeModeFrame\");\n    this.pipeType = document.querySelectorAll(\"[name='mode-switch-pipe']\");\n  }\n\n  render() {}\n}\n\nexport default InfoPanel;\n","import CanvasModel from \"../../2d/models/canvas.model\";\nimport { ToolbarMenu, ToolbarMode } from \"../controller/toolbar.controller\";\n\nclass Toolbar {\n  model: { menu: ToolbarMenu; subMenu?: string };\n  container: HTMLElement | null;\n  menu: HTMLElement | null;\n  menuItems: NodeListOf<HTMLElement> | null;\n  subMenus: NodeListOf<HTMLElement> | null;\n  subMenuItems: NodeListOf<HTMLElement> | null;\n\n  constructor(model: { menu: ToolbarMenu; subMenu?: string }) {\n    this.model = model;\n    this.container = document.querySelector(\".toolbar\");\n    this.menu = document.querySelector(\".menu\");\n    this.menuItems = document.querySelectorAll(\".menuItem\");\n    this.subMenus = document.querySelectorAll(\".subMenu\");\n    this.subMenuItems = document.querySelectorAll(\".subMenuItem\");\n  }\n\n  render() {\n    if (!this.subMenus || !this.menu || !this.menuItems || !this.container)\n      return;\n\n    Array.from(this.menuItems).map((menu) => {\n      if (\"toolbar_\" + this.model.menu === menu.id) {\n        menu.style.background = \"cadetblue\";\n      } else {\n        menu.style.background = \"black\";\n      }\n    });\n\n    Array.from(this.subMenus).map((subMenu) => {\n      subMenu.style.display = \"none\";\n      if (this.model.menu === \"default\") {\n        subMenu.style.display = \"none\";\n      } else {\n        if (\"toolbar_\" + this.model.menu === subMenu.getAttribute(\"data-tab\")) {\n          subMenu.style.display = \"flex\";\n        }\n      }\n    });\n  }\n}\n\nexport default Toolbar;\n","export const uuid = (): string => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\n/**\n * https://mariusschulz.com/blog/keyof-and-lookup-types-in-typescript\n * @param obj\n * @param key\n */\nexport function getProperty<T>(obj: any, key: any): T | null {\n  return key in obj ? obj : null;\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}